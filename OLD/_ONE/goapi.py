# MACHINE GENERATED CODE.  See grok_goapi.py.

class QFunc(object):
  def __init__(self, takes, rets):
    self.takes = takes
    self.rets = rets
  def Invoklet(self):
    return ''

class QMeth(object):
  def __init__(self, name, takes, rets, signature, text):
    self.name = name
    self.takes = takes
    self.rets = rets
    self.signature = signature
    self.text = text
  def Invoklet(self):
    return '.%s' % self.name

QFuncs = {

  "archive/tar.NewReader": QFunc(['io.Reader'], ['*Reader']),
  "archive/tar.NewWriter": QFunc(['io.Writer'], ['*Writer']),
  "archive/zip.FileInfoHeader": QFunc(['os.FileInfo'], ['*FileHeader', 'error']),
  "archive/zip.NewReader": QFunc(['io.ReaderAt', 'int64'], ['*Reader', 'error']),
  "archive/zip.NewWriter": QFunc(['io.Writer'], ['*Writer']),
  "archive/zip.OpenReader": QFunc(['string'], ['*ReadCloser', 'error']),
  "bufio.NewReadWriter": QFunc(['*Reader', '*Writer'], ['*ReadWriter']),
  "bufio.NewReader": QFunc(['io.Reader'], ['*Reader']),
  "bufio.NewReaderSize": QFunc(['io.Reader', 'int'], ['*Reader']),
  "bufio.NewWriter": QFunc(['io.Writer'], ['*Writer']),
  "bufio.NewWriterSize": QFunc(['io.Writer', 'int'], ['*Writer']),
  "bytes.Compare": QFunc(['[]uint8', '[]uint8'], ['int']),
  "bytes.Contains": QFunc(['[]uint8', '[]uint8'], ['bool']),
  "bytes.Count": QFunc(['[]uint8', '[]uint8'], ['int']),
  "bytes.Equal": QFunc(['[]uint8', '[]uint8'], ['bool']),
  "bytes.EqualFold": QFunc(['[]uint8', '[]uint8'], ['bool']),
  "bytes.Fields": QFunc(['[]uint8'], ['[][]uint8']),
  "bytes.HasPrefix": QFunc(['[]uint8', '[]uint8'], ['bool']),
  "bytes.HasSuffix": QFunc(['[]uint8', '[]uint8'], ['bool']),
  "bytes.Index": QFunc(['[]uint8', '[]uint8'], ['int']),
  "bytes.IndexAny": QFunc(['[]uint8', 'string'], ['int']),
  "bytes.IndexByte": QFunc(['[]uint8', 'uint8'], ['int']),
  "bytes.IndexRune": QFunc(['[]uint8', 'int32'], ['int']),
  "bytes.Join": QFunc(['[][]uint8', '[]uint8'], ['[]uint8']),
  "bytes.LastIndex": QFunc(['[]uint8', '[]uint8'], ['int']),
  "bytes.LastIndexAny": QFunc(['[]uint8', 'string'], ['int']),
  "bytes.NewBuffer": QFunc(['[]uint8'], ['*bytes.Buffer']),
  "bytes.NewBufferString": QFunc(['string'], ['*bytes.Buffer']),
  "bytes.NewReader": QFunc(['[]uint8'], ['*bytes.Reader']),
  "bytes.Repeat": QFunc(['[]uint8', 'int'], ['[]uint8']),
  "bytes.Replace": QFunc(['[]uint8', '[]uint8', '[]uint8', 'int'], ['[]uint8']),
  "bytes.Runes": QFunc(['[]uint8'], ['[]int32']),
  "bytes.Split": QFunc(['[]uint8', '[]uint8'], ['[][]uint8']),
  "bytes.SplitAfter": QFunc(['[]uint8', '[]uint8'], ['[][]uint8']),
  "bytes.SplitAfterN": QFunc(['[]uint8', '[]uint8', 'int'], ['[][]uint8']),
  "bytes.SplitN": QFunc(['[]uint8', '[]uint8', 'int'], ['[][]uint8']),
  "bytes.Title": QFunc(['[]uint8'], ['[]uint8']),
  "bytes.ToLower": QFunc(['[]uint8'], ['[]uint8']),
  "bytes.ToTitle": QFunc(['[]uint8'], ['[]uint8']),
  "bytes.ToUpper": QFunc(['[]uint8'], ['[]uint8']),
  "bytes.Trim": QFunc(['[]uint8', 'string'], ['[]uint8']),
  "bytes.TrimLeft": QFunc(['[]uint8', 'string'], ['[]uint8']),
  "bytes.TrimRight": QFunc(['[]uint8', 'string'], ['[]uint8']),
  "bytes.TrimSpace": QFunc(['[]uint8'], ['[]uint8']),
  "compress/bzip2.NewReader": QFunc(['io.Reader'], ['io.Reader']),
  "compress/flate.NewReader": QFunc(['io.Reader'], ['io.ReadCloser']),
  "compress/flate.NewReaderDict": QFunc(['io.Reader', '[]uint8'], ['io.ReadCloser']),
  "compress/flate.NewWriter": QFunc(['io.Writer', 'int'], ['*Writer', 'error']),
  "compress/flate.NewWriterDict": QFunc(['io.Writer', 'int', '[]uint8'], ['*Writer', 'error']),
  "compress/gzip.NewReader": QFunc(['io.Reader'], ['*Reader', 'error']),
  "compress/gzip.NewWriter": QFunc(['io.Writer'], ['*Writer']),
  "compress/gzip.NewWriterLevel": QFunc(['io.Writer', 'int'], ['*Writer', 'error']),
  "compress/lzw.NewReader": QFunc(['io.Reader', 'Order', 'int'], ['io.ReadCloser']),
  "compress/lzw.NewWriter": QFunc(['io.Writer', 'Order', 'int'], ['io.WriteCloser']),
  "compress/zlib.NewReader": QFunc(['io.Reader'], ['io.ReadCloser', 'error']),
  "compress/zlib.NewReaderDict": QFunc(['io.Reader', '[]uint8'], ['io.ReadCloser', 'error']),
  "compress/zlib.NewWriter": QFunc(['io.Writer'], ['*Writer']),
  "compress/zlib.NewWriterLevel": QFunc(['io.Writer', 'int'], ['*Writer', 'error']),
  "compress/zlib.NewWriterLevelDict": QFunc(['io.Writer', 'int', '[]uint8'], ['*Writer', 'error']),
  "container/heap.Init": QFunc(['Interface'], []),
  "container/list.New": QFunc([], ['*List']),
  "container/ring.New": QFunc(['int'], ['*Ring']),
  "crypto/cipher.NewCBCDecrypter": QFunc(['Block', '[]uint8'], ['BlockMode']),
  "crypto/cipher.NewCBCEncrypter": QFunc(['Block', '[]uint8'], ['BlockMode']),
  "crypto/cipher.NewCFBDecrypter": QFunc(['Block', '[]uint8'], ['Stream']),
  "crypto/cipher.NewCFBEncrypter": QFunc(['Block', '[]uint8'], ['Stream']),
  "crypto/cipher.NewCTR": QFunc(['Block', '[]uint8'], ['Stream']),
  "crypto/cipher.NewOFB": QFunc(['Block', '[]uint8'], ['Stream']),
  "crypto/dsa.GenerateKey": QFunc(['*PrivateKey', 'io.Reader'], ['error']),
  "crypto/dsa.GenerateParameters": QFunc(['*Parameters', 'io.Reader', 'ParameterSizes'], ['error']),
  "crypto/elliptic.P224": QFunc([], ['Curve']),
  "crypto/elliptic.P256": QFunc([], ['Curve']),
  "crypto/elliptic.P384": QFunc([], ['Curve']),
  "crypto/elliptic.P521": QFunc([], ['Curve']),
  "crypto/rand.Read": QFunc(['[]uint8'], ['int', 'error']),
  "crypto/rc4.NewCipher": QFunc(['[]uint8'], ['*Cipher', 'error']),
  "crypto/rsa.DecryptPKCS1v15": QFunc(['io.Reader', '*PrivateKey', '[]uint8'], ['[]uint8', 'error']),
  "crypto/rsa.DecryptPKCS1v15SessionKey": QFunc(['io.Reader', '*PrivateKey', '[]uint8', '[]uint8'], ['error']),
  "crypto/rsa.EncryptPKCS1v15": QFunc(['io.Reader', '*PublicKey', '[]uint8'], ['[]uint8', 'error']),
  "crypto/rsa.GenerateKey": QFunc(['io.Reader', 'int'], ['*PrivateKey', 'error']),
  "crypto/rsa.GenerateMultiPrimeKey": QFunc(['io.Reader', 'int', 'int'], ['*PrivateKey', 'error']),
  "crypto/subtle.ConstantTimeByteEq": QFunc(['uint8', 'uint8'], ['int']),
  "crypto/subtle.ConstantTimeCompare": QFunc(['[]uint8', '[]uint8'], ['int']),
  "crypto/subtle.ConstantTimeCopy": QFunc(['int', '[]uint8', '[]uint8'], []),
  "crypto/subtle.ConstantTimeEq": QFunc(['int32', 'int32'], ['int']),
  "crypto/subtle.ConstantTimeSelect": QFunc(['int', 'int', 'int'], ['int']),
  "crypto/tls.Dial": QFunc(['string', 'string', '*Config'], ['*Conn', 'error']),
  "crypto/tls.LoadX509KeyPair": QFunc(['string', 'string'], ['Certificate', 'error']),
  "crypto/tls.X509KeyPair": QFunc(['[]uint8', '[]uint8'], ['Certificate', 'error']),
  "crypto/x509.NewCertPool": QFunc([], ['*CertPool']),
  "crypto/x509.ParseCertificate": QFunc(['[]uint8'], ['*Certificate', 'error']),
  "crypto/x509.ParseCertificates": QFunc(['[]uint8'], ['[]*Certificate', 'error']),
  "database/sql.Open": QFunc(['string', 'string'], ['*DB', 'error']),
  "debug/dwarf.New": QFunc(['[]uint8', '[]uint8', '[]uint8', '[]uint8', '[]uint8', '[]uint8', '[]uint8', '[]uint8'], ['*Data', 'error']),
  "debug/elf.NewFile": QFunc(['io.ReaderAt'], ['*File', 'error']),
  "debug/elf.Open": QFunc(['string'], ['*File', 'error']),
  "debug/elf.R_INFO": QFunc(['uint32', 'uint32'], ['uint64']),
  "debug/elf.R_INFO32": QFunc(['uint32', 'uint32'], ['uint32']),
  "debug/elf.R_SYM32": QFunc(['uint32'], ['uint32']),
  "debug/elf.R_SYM64": QFunc(['uint64'], ['uint32']),
  "debug/elf.R_TYPE32": QFunc(['uint32'], ['uint32']),
  "debug/elf.R_TYPE64": QFunc(['uint64'], ['uint32']),
  "debug/elf.ST_BIND": QFunc(['uint8'], ['SymBind']),
  "debug/elf.ST_INFO": QFunc(['SymBind', 'SymType'], ['uint8']),
  "debug/elf.ST_TYPE": QFunc(['uint8'], ['SymType']),
  "debug/elf.ST_VISIBILITY": QFunc(['uint8'], ['SymVis']),
  "debug/gosym.NewLineTable": QFunc(['[]uint8', 'uint64'], ['*LineTable']),
  "debug/gosym.NewTable": QFunc(['[]uint8', '*LineTable'], ['*Table', 'error']),
  "debug/macho.NewFile": QFunc(['io.ReaderAt'], ['*File', 'error']),
  "debug/macho.Open": QFunc(['string'], ['*File', 'error']),
  "debug/pe.NewFile": QFunc(['io.ReaderAt'], ['*File', 'error']),
  "debug/pe.Open": QFunc(['string'], ['*File', 'error']),
  "encoding/ascii85.Decode": QFunc(['[]uint8', '[]uint8', 'bool'], ['int', 'int', 'error']),
  "encoding/ascii85.Encode": QFunc(['[]uint8', '[]uint8'], ['int']),
  "encoding/ascii85.MaxEncodedLen": QFunc(['int'], ['int']),
  "encoding/ascii85.NewDecoder": QFunc(['io.Reader'], ['io.Reader']),
  "encoding/ascii85.NewEncoder": QFunc(['io.Writer'], ['io.WriteCloser']),
  "encoding/base32.NewDecoder": QFunc(['*Encoding', 'io.Reader'], ['io.Reader']),
  "encoding/base32.NewEncoder": QFunc(['*Encoding', 'io.Writer'], ['io.WriteCloser']),
  "encoding/base32.NewEncoding": QFunc(['string'], ['*Encoding']),
  "encoding/base64.NewDecoder": QFunc(['*Encoding', 'io.Reader'], ['io.Reader']),
  "encoding/base64.NewEncoder": QFunc(['*Encoding', 'io.Writer'], ['io.WriteCloser']),
  "encoding/base64.NewEncoding": QFunc(['string'], ['*Encoding']),
  "encoding/binary.PutUvarint": QFunc(['[]uint8', 'uint64'], ['int']),
  "encoding/binary.PutVarint": QFunc(['[]uint8', 'int64'], ['int']),
  "encoding/binary.ReadUvarint": QFunc(['io.ByteReader'], ['uint64', 'error']),
  "encoding/binary.ReadVarint": QFunc(['io.ByteReader'], ['int64', 'error']),
  "encoding/binary.Uvarint": QFunc(['[]uint8'], ['uint64', 'int']),
  "encoding/binary.Varint": QFunc(['[]uint8'], ['int64', 'int']),
  "encoding/csv.NewReader": QFunc(['io.Reader'], ['*Reader']),
  "encoding/csv.NewWriter": QFunc(['io.Writer'], ['*Writer']),
  "encoding/gob.NewDecoder": QFunc(['io.Reader'], ['*Decoder']),
  "encoding/gob.NewEncoder": QFunc(['io.Writer'], ['*Encoder']),
  "encoding/hex.Decode": QFunc(['[]uint8', '[]uint8'], ['int', 'error']),
  "encoding/hex.DecodeString": QFunc(['string'], ['[]uint8', 'error']),
  "encoding/hex.DecodedLen": QFunc(['int'], ['int']),
  "encoding/hex.Dump": QFunc(['[]uint8'], ['string']),
  "encoding/hex.Dumper": QFunc(['io.Writer'], ['io.WriteCloser']),
  "encoding/hex.Encode": QFunc(['[]uint8', '[]uint8'], ['int']),
  "encoding/hex.EncodeToString": QFunc(['[]uint8'], ['string']),
  "encoding/hex.EncodedLen": QFunc(['int'], ['int']),
  "encoding/json.Compact": QFunc(['*bytes.Buffer', '[]uint8'], ['error']),
  "encoding/json.HTMLEscape": QFunc(['*bytes.Buffer', '[]uint8'], []),
  "encoding/json.Indent": QFunc(['*bytes.Buffer', '[]uint8', 'string', 'string'], ['error']),
  "encoding/json.NewDecoder": QFunc(['io.Reader'], ['*Decoder']),
  "encoding/json.NewEncoder": QFunc(['io.Writer'], ['*Encoder']),
  "encoding/pem.Decode": QFunc(['[]uint8'], ['*Block', '[]uint8']),
  "encoding/pem.Encode": QFunc(['io.Writer', '*Block'], ['error']),
  "encoding/pem.EncodeToMemory": QFunc(['*Block'], ['[]uint8']),
  "encoding/xml.CopyToken": QFunc(['Token'], ['Token']),
  "encoding/xml.Escape": QFunc(['io.Writer', '[]uint8'], []),
  "encoding/xml.NewDecoder": QFunc(['io.Reader'], ['*Decoder']),
  "encoding/xml.NewEncoder": QFunc(['io.Writer'], ['*Encoder']),
  "errors.New": QFunc(['string'], ['error']),
  "expvar.Get": QFunc(['string'], ['Var']),
  "expvar.NewFloat": QFunc(['string'], ['*Float']),
  "expvar.NewInt": QFunc(['string'], ['*Int']),
  "expvar.NewMap": QFunc(['string'], ['*Map']),
  "expvar.NewString": QFunc(['string'], ['*String']),
  "expvar.Publish": QFunc(['string', 'Var'], []),
  "flag.Arg": QFunc(['int'], ['string']),
  "flag.Args": QFunc([], ['[]string']),
  "flag.Bool": QFunc(['string', 'bool', 'string'], ['*bool']),
  "flag.BoolVar": QFunc(['*bool', 'string', 'bool', 'string'], []),
  "flag.Duration": QFunc(['string', 'time.Duration', 'string'], ['*time.Duration']),
  "flag.DurationVar": QFunc(['*time.Duration', 'string', 'time.Duration', 'string'], []),
  "flag.Float64": QFunc(['string', 'float64', 'string'], ['*float64']),
  "flag.Float64Var": QFunc(['*float64', 'string', 'float64', 'string'], []),
  "flag.Int": QFunc(['string', 'int', 'string'], ['*int']),
  "flag.Int64": QFunc(['string', 'int64', 'string'], ['*int64']),
  "flag.Int64Var": QFunc(['*int64', 'string', 'int64', 'string'], []),
  "flag.IntVar": QFunc(['*int', 'string', 'int', 'string'], []),
  "flag.Lookup": QFunc(['string'], ['*Flag']),
  "flag.NArg": QFunc([], ['int']),
  "flag.NFlag": QFunc([], ['int']),
  "flag.NewFlagSet": QFunc(['string', 'ErrorHandling'], ['*FlagSet']),
  "flag.Parse": QFunc([], []),
  "flag.Parsed": QFunc([], ['bool']),
  "flag.PrintDefaults": QFunc([], []),
  "flag.Set": QFunc(['string', 'string'], ['error']),
  "flag.String": QFunc(['string', 'string', 'string'], ['*string']),
  "flag.StringVar": QFunc(['*string', 'string', 'string', 'string'], []),
  "flag.Uint": QFunc(['string', 'uint', 'string'], ['*uint']),
  "flag.Uint64": QFunc(['string', 'uint64', 'string'], ['*uint64']),
  "flag.Uint64Var": QFunc(['*uint64', 'string', 'uint64', 'string'], []),
  "flag.UintVar": QFunc(['*uint', 'string', 'uint', 'string'], []),
  "flag.Var": QFunc(['Value', 'string', 'string'], []),
  "go/ast.FileExports": QFunc(['*File'], ['bool']),
  "go/ast.FilterDecl": QFunc(['Decl', 'Filter'], ['bool']),
  "go/ast.FilterFile": QFunc(['*File', 'Filter'], ['bool']),
  "go/ast.FilterPackage": QFunc(['*Package', 'Filter'], ['bool']),
  "go/ast.IsExported": QFunc(['string'], ['bool']),
  "go/ast.MergePackageFiles": QFunc(['*Package', 'MergeMode'], ['*File']),
  "go/ast.NewIdent": QFunc(['string'], ['*Ident']),
  "go/ast.NewObj": QFunc(['ObjKind', 'string'], ['*Object']),
  "go/ast.NewScope": QFunc(['*Scope'], ['*Scope']),
  "go/ast.NotNilFilter": QFunc(['string', 'reflect.Value'], ['bool']),
  "go/ast.PackageExports": QFunc(['*Package'], ['bool']),
  "go/ast.Walk": QFunc(['Visitor', 'Node'], []),
  "go/build.ArchChar": QFunc(['string'], ['string', 'error']),
  "go/build.Import": QFunc(['string', 'string', 'ImportMode'], ['*Package', 'error']),
  "go/build.ImportDir": QFunc(['string', 'ImportMode'], ['*Package', 'error']),
  "go/build.IsLocalImport": QFunc(['string'], ['bool']),
  "go/doc.Synopsis": QFunc(['string'], ['string']),
  "go/doc.ToHTML": QFunc(['io.Writer', 'string', 'map[string]string'], []),
  "go/doc.ToText": QFunc(['io.Writer', 'string', 'string', 'string', 'int'], []),
  "go/scanner.PrintError": QFunc(['io.Writer', 'error'], []),
  "go/token.Lookup": QFunc(['string'], ['Token']),
  "go/token.NewFileSet": QFunc([], ['*FileSet']),
  "hash/adler32.Checksum": QFunc(['[]uint8'], ['uint32']),
  "hash/crc32.Checksum": QFunc(['[]uint8', '*Table'], ['uint32']),
  "hash/crc32.ChecksumIEEE": QFunc(['[]uint8'], ['uint32']),
  "hash/crc32.MakeTable": QFunc(['uint32'], ['*Table']),
  "hash/crc32.Update": QFunc(['uint32', '*Table', '[]uint8'], ['uint32']),
  "hash/crc64.Checksum": QFunc(['[]uint8', '*Table'], ['uint64']),
  "hash/crc64.MakeTable": QFunc(['uint64'], ['*Table']),
  "hash/crc64.Update": QFunc(['uint64', '*Table', '[]uint8'], ['uint64']),
  "html.EscapeString": QFunc(['string'], ['string']),
  "html.UnescapeString": QFunc(['string'], ['string']),
  "html/template.HTMLEscape": QFunc(['io.Writer', '[]uint8'], []),
  "html/template.HTMLEscapeString": QFunc(['string'], ['string']),
  "html/template.JSEscape": QFunc(['io.Writer', '[]uint8'], []),
  "html/template.JSEscapeString": QFunc(['string'], ['string']),
  "html/template.Must": QFunc(['*Template', 'error'], ['*Template']),
  "html/template.New": QFunc(['string'], ['*Template']),
  "html/template.ParseGlob": QFunc(['string'], ['*Template', 'error']),
  "image.Decode": QFunc(['io.Reader'], ['Image', 'string', 'error']),
  "image.DecodeConfig": QFunc(['io.Reader'], ['Config', 'string', 'error']),
  "image.NewAlpha": QFunc(['Rectangle'], ['*Alpha']),
  "image.NewAlpha16": QFunc(['Rectangle'], ['*Alpha16']),
  "image.NewGray": QFunc(['Rectangle'], ['*Gray']),
  "image.NewGray16": QFunc(['Rectangle'], ['*Gray16']),
  "image.NewNRGBA": QFunc(['Rectangle'], ['*NRGBA']),
  "image.NewNRGBA64": QFunc(['Rectangle'], ['*NRGBA64']),
  "image.NewRGBA": QFunc(['Rectangle'], ['*RGBA']),
  "image.NewRGBA64": QFunc(['Rectangle'], ['*RGBA64']),
  "image.NewYCbCr": QFunc(['Rectangle', 'YCbCrSubsampleRatio'], ['*YCbCr']),
  "image.Pt": QFunc(['int', 'int'], ['Point']),
  "image.Rect": QFunc(['int', 'int', 'int', 'int'], ['Rectangle']),
  "image/color.RGBToYCbCr": QFunc(['uint8', 'uint8', 'uint8'], ['uint8', 'uint8', 'uint8']),
  "image/color.YCbCrToRGB": QFunc(['uint8', 'uint8', 'uint8'], ['uint8', 'uint8', 'uint8']),
  "image/gif.DecodeAll": QFunc(['io.Reader'], ['*GIF', 'error']),
  "index/suffixarray.New": QFunc(['[]uint8'], ['*Index']),
  "io.Copy": QFunc(['io.Writer', 'io.Reader'], ['int64', 'error']),
  "io.CopyN": QFunc(['io.Writer', 'io.Reader', 'int64'], ['int64', 'error']),
  "io.LimitReader": QFunc(['io.Reader', 'int64'], ['io.Reader']),
  "io.NewSectionReader": QFunc(['io.ReaderAt', 'int64', 'int64'], ['*io.SectionReader']),
  "io.Pipe": QFunc([], ['*io.PipeReader', '*io.PipeWriter']),
  "io.ReadAtLeast": QFunc(['io.Reader', '[]uint8', 'int'], ['int', 'error']),
  "io.ReadFull": QFunc(['io.Reader', '[]uint8'], ['int', 'error']),
  "io.TeeReader": QFunc(['io.Reader', 'io.Writer'], ['io.Reader']),
  "io.WriteString": QFunc(['io.Writer', 'string'], ['int', 'error']),
  "io/ioutil.NopCloser": QFunc(['io.Reader'], ['io.ReadCloser']),
  "io/ioutil.ReadAll": QFunc(['io.Reader'], ['[]uint8', 'error']),
  "io/ioutil.ReadDir": QFunc(['string'], ['[]os.FileInfo', 'error']),
  "io/ioutil.ReadFile": QFunc(['string'], ['[]uint8', 'error']),
  "io/ioutil.TempDir": QFunc(['string', 'string'], ['string', 'error']),
  "io/ioutil.TempFile": QFunc(['string', 'string'], ['*os.File', 'error']),
  "io/ioutil.WriteFile": QFunc(['string', '[]uint8', 'os.FileMode'], ['error']),
  "log.Flags": QFunc([], ['int']),
  "log.New": QFunc(['io.Writer', 'string', 'int'], ['*Logger']),
  "log.Prefix": QFunc([], ['string']),
  "log.SetFlags": QFunc(['int'], []),
  "log.SetOutput": QFunc(['io.Writer'], []),
  "log.SetPrefix": QFunc(['string'], []),
  "math.Abs": QFunc(['float64'], ['float64']),
  "math.Acos": QFunc(['float64'], ['float64']),
  "math.Acosh": QFunc(['float64'], ['float64']),
  "math.Asin": QFunc(['float64'], ['float64']),
  "math.Asinh": QFunc(['float64'], ['float64']),
  "math.Atan": QFunc(['float64'], ['float64']),
  "math.Atan2": QFunc(['float64', 'float64'], ['float64']),
  "math.Atanh": QFunc(['float64'], ['float64']),
  "math.Cbrt": QFunc(['float64'], ['float64']),
  "math.Ceil": QFunc(['float64'], ['float64']),
  "math.Copysign": QFunc(['float64', 'float64'], ['float64']),
  "math.Cos": QFunc(['float64'], ['float64']),
  "math.Cosh": QFunc(['float64'], ['float64']),
  "math.Dim": QFunc(['float64', 'float64'], ['float64']),
  "math.Erf": QFunc(['float64'], ['float64']),
  "math.Erfc": QFunc(['float64'], ['float64']),
  "math.Exp": QFunc(['float64'], ['float64']),
  "math.Exp2": QFunc(['float64'], ['float64']),
  "math.Expm1": QFunc(['float64'], ['float64']),
  "math.Float32bits": QFunc(['float32'], ['uint32']),
  "math.Float32frombits": QFunc(['uint32'], ['float32']),
  "math.Float64bits": QFunc(['float64'], ['uint64']),
  "math.Float64frombits": QFunc(['uint64'], ['float64']),
  "math.Floor": QFunc(['float64'], ['float64']),
  "math.Frexp": QFunc(['float64'], ['float64', 'int']),
  "math.Gamma": QFunc(['float64'], ['float64']),
  "math.Hypot": QFunc(['float64', 'float64'], ['float64']),
  "math.Ilogb": QFunc(['float64'], ['int']),
  "math.Inf": QFunc(['int'], ['float64']),
  "math.IsInf": QFunc(['float64', 'int'], ['bool']),
  "math.IsNaN": QFunc(['float64'], ['bool']),
  "math.J0": QFunc(['float64'], ['float64']),
  "math.J1": QFunc(['float64'], ['float64']),
  "math.Jn": QFunc(['int', 'float64'], ['float64']),
  "math.Ldexp": QFunc(['float64', 'int'], ['float64']),
  "math.Lgamma": QFunc(['float64'], ['float64', 'int']),
  "math.Log": QFunc(['float64'], ['float64']),
  "math.Log10": QFunc(['float64'], ['float64']),
  "math.Log1p": QFunc(['float64'], ['float64']),
  "math.Log2": QFunc(['float64'], ['float64']),
  "math.Logb": QFunc(['float64'], ['float64']),
  "math.Max": QFunc(['float64', 'float64'], ['float64']),
  "math.Min": QFunc(['float64', 'float64'], ['float64']),
  "math.Mod": QFunc(['float64', 'float64'], ['float64']),
  "math.Modf": QFunc(['float64'], ['float64', 'float64']),
  "math.NaN": QFunc([], ['float64']),
  "math.Nextafter": QFunc(['float64', 'float64'], ['float64']),
  "math.Pow": QFunc(['float64', 'float64'], ['float64']),
  "math.Pow10": QFunc(['int'], ['float64']),
  "math.Remainder": QFunc(['float64', 'float64'], ['float64']),
  "math.Signbit": QFunc(['float64'], ['bool']),
  "math.Sin": QFunc(['float64'], ['float64']),
  "math.Sincos": QFunc(['float64'], ['float64', 'float64']),
  "math.Sinh": QFunc(['float64'], ['float64']),
  "math.Sqrt": QFunc(['float64'], ['float64']),
  "math.Tan": QFunc(['float64'], ['float64']),
  "math.Tanh": QFunc(['float64'], ['float64']),
  "math.Trunc": QFunc(['float64'], ['float64']),
  "math.Y0": QFunc(['float64'], ['float64']),
  "math.Y1": QFunc(['float64'], ['float64']),
  "math.Yn": QFunc(['int', 'float64'], ['float64']),
  "math/big.NewInt": QFunc(['int64'], ['*Int']),
  "math/big.NewRat": QFunc(['int64', 'int64'], ['*Rat']),
  "math/rand.ExpFloat64": QFunc([], ['float64']),
  "math/rand.Float32": QFunc([], ['float32']),
  "math/rand.Float64": QFunc([], ['float64']),
  "math/rand.Int": QFunc([], ['int']),
  "math/rand.Int31": QFunc([], ['int32']),
  "math/rand.Int31n": QFunc(['int32'], ['int32']),
  "math/rand.Int63": QFunc([], ['int64']),
  "math/rand.Int63n": QFunc(['int64'], ['int64']),
  "math/rand.Intn": QFunc(['int'], ['int']),
  "math/rand.New": QFunc(['Source'], ['*Rand']),
  "math/rand.NewSource": QFunc(['int64'], ['Source']),
  "math/rand.NewZipf": QFunc(['*Rand', 'float64', 'float64', 'uint64'], ['*Zipf']),
  "math/rand.NormFloat64": QFunc([], ['float64']),
  "math/rand.Perm": QFunc(['int'], ['[]int']),
  "math/rand.Seed": QFunc(['int64'], []),
  "math/rand.Uint32": QFunc([], ['uint32']),
  "mime.AddExtensionType": QFunc(['string', 'string'], ['error']),
  "mime.FormatMediaType": QFunc(['string', 'map[string]string'], ['string']),
  "mime.ParseMediaType": QFunc(['string'], ['string', 'map[string]string', 'error']),
  "mime.TypeByExtension": QFunc(['string'], ['string']),
  "mime/multipart.NewReader": QFunc(['io.Reader', 'string'], ['*Reader']),
  "mime/multipart.NewWriter": QFunc(['io.Writer'], ['*Writer']),
  "net.CIDRMask": QFunc(['int', 'int'], ['IPMask']),
  "net.Dial": QFunc(['string', 'string'], ['Conn', 'error']),
  "net.DialIP": QFunc(['string', '*IPAddr', '*IPAddr'], ['*IPConn', 'error']),
  "net.DialTCP": QFunc(['string', '*TCPAddr', '*TCPAddr'], ['*TCPConn', 'error']),
  "net.DialTimeout": QFunc(['string', 'string', 'time.Duration'], ['Conn', 'error']),
  "net.DialUDP": QFunc(['string', '*UDPAddr', '*UDPAddr'], ['*UDPConn', 'error']),
  "net.DialUnix": QFunc(['string', '*UnixAddr', '*UnixAddr'], ['*UnixConn', 'error']),
  "net.FileConn": QFunc(['*os.File'], ['Conn', 'error']),
  "net.FileListener": QFunc(['*os.File'], ['Listener', 'error']),
  "net.FilePacketConn": QFunc(['*os.File'], ['PacketConn', 'error']),
  "net.IPv4": QFunc(['uint8', 'uint8', 'uint8', 'uint8'], ['IP']),
  "net.IPv4Mask": QFunc(['uint8', 'uint8', 'uint8', 'uint8'], ['IPMask']),
  "net.InterfaceAddrs": QFunc([], ['[]Addr', 'error']),
  "net.InterfaceByIndex": QFunc(['int'], ['*Interface', 'error']),
  "net.InterfaceByName": QFunc(['string'], ['*Interface', 'error']),
  "net.Interfaces": QFunc([], ['[]Interface', 'error']),
  "net.JoinHostPort": QFunc(['string', 'string'], ['string']),
  "net.Listen": QFunc(['string', 'string'], ['Listener', 'error']),
  "net.ListenIP": QFunc(['string', '*IPAddr'], ['*IPConn', 'error']),
  "net.ListenMulticastUDP": QFunc(['string', '*Interface', '*UDPAddr'], ['*UDPConn', 'error']),
  "net.ListenPacket": QFunc(['string', 'string'], ['PacketConn', 'error']),
  "net.ListenTCP": QFunc(['string', '*TCPAddr'], ['*TCPListener', 'error']),
  "net.ListenUDP": QFunc(['string', '*UDPAddr'], ['*UDPConn', 'error']),
  "net.ListenUnix": QFunc(['string', '*UnixAddr'], ['*UnixListener', 'error']),
  "net.ListenUnixgram": QFunc(['string', '*UnixAddr'], ['*UDPConn', 'error']),
  "net.LookupAddr": QFunc(['string'], ['[]string', 'error']),
  "net.LookupCNAME": QFunc(['string'], ['string', 'error']),
  "net.LookupHost": QFunc(['string'], ['[]string', 'error']),
  "net.LookupIP": QFunc(['string'], ['[]IP', 'error']),
  "net.LookupMX": QFunc(['string'], ['[]*MX', 'error']),
  "net.LookupPort": QFunc(['string', 'string'], ['int', 'error']),
  "net.LookupSRV": QFunc(['string', 'string', 'string'], ['string', '[]*SRV', 'error']),
  "net.LookupTXT": QFunc(['string'], ['[]string', 'error']),
  "net.ParseCIDR": QFunc(['string'], ['IP', '*IPNet', 'error']),
  "net.ParseIP": QFunc(['string'], ['IP']),
  "net.ParseMAC": QFunc(['string'], ['HardwareAddr', 'error']),
  "net.Pipe": QFunc([], ['Conn', 'Conn']),
  "net.ResolveIPAddr": QFunc(['string', 'string'], ['*IPAddr', 'error']),
  "net.ResolveTCPAddr": QFunc(['string', 'string'], ['*TCPAddr', 'error']),
  "net.ResolveUDPAddr": QFunc(['string', 'string'], ['*UDPAddr', 'error']),
  "net.ResolveUnixAddr": QFunc(['string', 'string'], ['*UnixAddr', 'error']),
  "net.SplitHostPort": QFunc(['string'], ['string', 'string', 'error']),
  "net/http.CanonicalHeaderKey": QFunc(['string'], ['string']),
  "net/http.DetectContentType": QFunc(['[]uint8'], ['string']),
  "net/http.Error": QFunc(['ResponseWriter', 'string', 'int'], []),
  "net/http.FileServer": QFunc(['FileSystem'], ['Handler']),
  "net/http.Get": QFunc(['string'], ['*Response', 'error']),
  "net/http.Handle": QFunc(['string', 'Handler'], []),
  "net/http.Head": QFunc(['string'], ['*Response', 'error']),
  "net/http.ListenAndServe": QFunc(['string', 'Handler'], ['error']),
  "net/http.ListenAndServeTLS": QFunc(['string', 'string', 'string', 'Handler'], ['error']),
  "net/http.MaxBytesReader": QFunc(['ResponseWriter', 'io.ReadCloser', 'int64'], ['io.ReadCloser']),
  "net/http.NewFileTransport": QFunc(['FileSystem'], ['RoundTripper']),
  "net/http.NewRequest": QFunc(['string', 'string', 'io.Reader'], ['*Request', 'error']),
  "net/http.NewServeMux": QFunc([], ['*ServeMux']),
  "net/http.NotFound": QFunc(['ResponseWriter', '*Request'], []),
  "net/http.NotFoundHandler": QFunc([], ['Handler']),
  "net/http.ParseHTTPVersion": QFunc(['string'], ['int', 'int', 'bool']),
  "net/http.Post": QFunc(['string', 'string', 'io.Reader'], ['*Response', 'error']),
  "net/http.Redirect": QFunc(['ResponseWriter', '*Request', 'string', 'int'], []),
  "net/http.RedirectHandler": QFunc(['string', 'int'], ['Handler']),
  "net/http.ServeContent": QFunc(['ResponseWriter', '*Request', 'string', 'time.Time', 'io.ReadSeeker'], []),
  "net/http.ServeFile": QFunc(['ResponseWriter', '*Request', 'string'], []),
  "net/http.SetCookie": QFunc(['ResponseWriter', '*Cookie'], []),
  "net/http.StatusText": QFunc(['int'], ['string']),
  "net/http.StripPrefix": QFunc(['string', 'Handler'], ['Handler']),
  "net/http.TimeoutHandler": QFunc(['Handler', 'time.Duration', 'string'], ['Handler']),
  "net/http/httptest.NewRecorder": QFunc([], ['*ResponseRecorder']),
  "net/http/httputil.NewChunkedReader": QFunc(['io.Reader'], ['io.Reader']),
  "net/http/httputil.NewChunkedWriter": QFunc(['io.Writer'], ['io.WriteCloser']),
  "net/mail.ReadMessage": QFunc(['io.Reader'], ['*Message', 'error']),
  "net/rpc.Dial": QFunc(['string', 'string'], ['*Client', 'error']),
  "net/rpc.DialHTTP": QFunc(['string', 'string'], ['*Client', 'error']),
  "net/rpc.DialHTTPPath": QFunc(['string', 'string', 'string'], ['*Client', 'error']),
  "net/rpc.HandleHTTP": QFunc([], []),
  "net/rpc.NewClient": QFunc(['io.ReadWriteCloser'], ['*Client']),
  "net/rpc.NewClientWithCodec": QFunc(['ClientCodec'], ['*Client']),
  "net/rpc.NewServer": QFunc([], ['*Server']),
  "net/rpc.ServeCodec": QFunc(['ServerCodec'], []),
  "net/rpc.ServeConn": QFunc(['io.ReadWriteCloser'], []),
  "net/rpc.ServeRequest": QFunc(['ServerCodec'], ['error']),
  "net/rpc/jsonrpc.ServeConn": QFunc(['io.ReadWriteCloser'], []),
  "net/smtp.CRAMMD5Auth": QFunc(['string', 'string'], ['Auth']),
  "net/smtp.Dial": QFunc(['string'], ['*Client', 'error']),
  "net/smtp.PlainAuth": QFunc(['string', 'string', 'string', 'string'], ['Auth']),
  "net/smtp.SendMail": QFunc(['string', 'Auth', 'string', '[]string', '[]uint8'], ['error']),
  "net/textproto.CanonicalMIMEHeaderKey": QFunc(['string'], ['string']),
  "net/textproto.Dial": QFunc(['string', 'string'], ['*Conn', 'error']),
  "net/textproto.NewConn": QFunc(['io.ReadWriteCloser'], ['*Conn']),
  "net/url.Parse": QFunc(['string'], ['*URL', 'error']),
  "net/url.ParseQuery": QFunc(['string'], ['Values', 'error']),
  "net/url.ParseRequestURI": QFunc(['string'], ['*URL', 'error']),
  "net/url.QueryEscape": QFunc(['string'], ['string']),
  "net/url.QueryUnescape": QFunc(['string'], ['string', 'error']),
  "net/url.User": QFunc(['string'], ['*Userinfo']),
  "net/url.UserPassword": QFunc(['string', 'string'], ['*Userinfo']),
  "os.Chdir": QFunc(['string'], ['error']),
  "os.Chmod": QFunc(['string', 'os.FileMode'], ['error']),
  "os.Chown": QFunc(['string', 'int', 'int'], ['error']),
  "os.Chtimes": QFunc(['string', 'time.Time', 'time.Time'], ['error']),
  "os.Clearenv": QFunc([], []),
  "os.Create": QFunc(['string'], ['*os.File', 'error']),
  "os.Environ": QFunc([], ['[]string']),
  "os.Exit": QFunc(['int'], []),
  "os.ExpandEnv": QFunc(['string'], ['string']),
  "os.FindProcess": QFunc(['int'], ['*os.Process', 'error']),
  "os.Getegid": QFunc([], ['int']),
  "os.Getenv": QFunc(['string'], ['string']),
  "os.Geteuid": QFunc([], ['int']),
  "os.Getgid": QFunc([], ['int']),
  "os.Getgroups": QFunc([], ['[]int', 'error']),
  "os.Getpagesize": QFunc([], ['int']),
  "os.Getpid": QFunc([], ['int']),
  "os.Getppid": QFunc([], ['int']),
  "os.Getuid": QFunc([], ['int']),
  "os.Getwd": QFunc([], ['string', 'error']),
  "os.Hostname": QFunc([], ['string', 'error']),
  "os.IsExist": QFunc(['error'], ['bool']),
  "os.IsNotExist": QFunc(['error'], ['bool']),
  "os.IsPathSeparator": QFunc(['uint8'], ['bool']),
  "os.IsPermission": QFunc(['error'], ['bool']),
  "os.Lchown": QFunc(['string', 'int', 'int'], ['error']),
  "os.Link": QFunc(['string', 'string'], ['error']),
  "os.Lstat": QFunc(['string'], ['os.FileInfo', 'error']),
  "os.Mkdir": QFunc(['string', 'os.FileMode'], ['error']),
  "os.MkdirAll": QFunc(['string', 'os.FileMode'], ['error']),
  "os.NewFile": QFunc(['uintptr', 'string'], ['*os.File']),
  "os.NewSyscallError": QFunc(['string', 'error'], ['error']),
  "os.Open": QFunc(['string'], ['*os.File', 'error']),
  "os.OpenFile": QFunc(['string', 'int', 'os.FileMode'], ['*os.File', 'error']),
  "os.Pipe": QFunc([], ['*os.File', '*os.File', 'error']),
  "os.Readlink": QFunc(['string'], ['string', 'error']),
  "os.Remove": QFunc(['string'], ['error']),
  "os.RemoveAll": QFunc(['string'], ['error']),
  "os.Rename": QFunc(['string', 'string'], ['error']),
  "os.SameFile": QFunc(['os.FileInfo', 'os.FileInfo'], ['bool']),
  "os.Setenv": QFunc(['string', 'string'], ['error']),
  "os.StartProcess": QFunc(['string', '[]string', '*os.ProcAttr'], ['*os.Process', 'error']),
  "os.Stat": QFunc(['string'], ['os.FileInfo', 'error']),
  "os.Symlink": QFunc(['string', 'string'], ['error']),
  "os.TempDir": QFunc([], ['string']),
  "os.Truncate": QFunc(['string', 'int64'], ['error']),
  "os/exec.LookPath": QFunc(['string'], ['string', 'error']),
  "os/user.Current": QFunc([], ['*User', 'error']),
  "os/user.Lookup": QFunc(['string'], ['*User', 'error']),
  "os/user.LookupId": QFunc(['string'], ['*User', 'error']),
  "path.Base": QFunc(['string'], ['string']),
  "path.Clean": QFunc(['string'], ['string']),
  "path.Dir": QFunc(['string'], ['string']),
  "path.Ext": QFunc(['string'], ['string']),
  "path.IsAbs": QFunc(['string'], ['bool']),
  "path.Match": QFunc(['string', 'string'], ['bool', 'error']),
  "path.Split": QFunc(['string'], ['string', 'string']),
  "path/filepath.Abs": QFunc(['string'], ['string', 'error']),
  "path/filepath.Base": QFunc(['string'], ['string']),
  "path/filepath.Clean": QFunc(['string'], ['string']),
  "path/filepath.Dir": QFunc(['string'], ['string']),
  "path/filepath.EvalSymlinks": QFunc(['string'], ['string', 'error']),
  "path/filepath.Ext": QFunc(['string'], ['string']),
  "path/filepath.FromSlash": QFunc(['string'], ['string']),
  "path/filepath.Glob": QFunc(['string'], ['[]string', 'error']),
  "path/filepath.HasPrefix": QFunc(['string', 'string'], ['bool']),
  "path/filepath.IsAbs": QFunc(['string'], ['bool']),
  "path/filepath.Match": QFunc(['string', 'string'], ['bool', 'error']),
  "path/filepath.Rel": QFunc(['string', 'string'], ['string', 'error']),
  "path/filepath.Split": QFunc(['string'], ['string', 'string']),
  "path/filepath.SplitList": QFunc(['string'], ['[]string']),
  "path/filepath.ToSlash": QFunc(['string'], ['string']),
  "path/filepath.VolumeName": QFunc(['string'], ['string']),
  "path/filepath.Walk": QFunc(['string', 'WalkFunc'], ['error']),
  "reflect.AppendSlice": QFunc(['reflect.Value', 'reflect.Value'], ['reflect.Value']),
  "reflect.Copy": QFunc(['reflect.Value', 'reflect.Value'], ['int']),
  "reflect.Indirect": QFunc(['reflect.Value'], ['reflect.Value']),
  "reflect.MakeChan": QFunc(['reflect.Type', 'int'], ['reflect.Value']),
  "reflect.MakeMap": QFunc(['reflect.Type'], ['reflect.Value']),
  "reflect.MakeSlice": QFunc(['reflect.Type', 'int', 'int'], ['reflect.Value']),
  "reflect.New": QFunc(['reflect.Type'], ['reflect.Value']),
  "reflect.PtrTo": QFunc(['reflect.Type'], ['reflect.Type']),
  "reflect.Zero": QFunc(['reflect.Type'], ['reflect.Value']),
  "regexp.Compile": QFunc(['string'], ['*Regexp', 'error']),
  "regexp.CompilePOSIX": QFunc(['string'], ['*Regexp', 'error']),
  "regexp.Match": QFunc(['string', '[]uint8'], ['bool', 'error']),
  "regexp.MatchReader": QFunc(['string', 'io.RuneReader'], ['bool', 'error']),
  "regexp.MatchString": QFunc(['string', 'string'], ['bool', 'error']),
  "regexp.MustCompile": QFunc(['string'], ['*Regexp']),
  "regexp.MustCompilePOSIX": QFunc(['string'], ['*Regexp']),
  "regexp.QuoteMeta": QFunc(['string'], ['string']),
  "regexp/syntax.Compile": QFunc(['*Regexp'], ['*Prog', 'error']),
  "regexp/syntax.EmptyOpContext": QFunc(['int32', 'int32'], ['EmptyOp']),
  "regexp/syntax.IsWordChar": QFunc(['int32'], ['bool']),
  "regexp/syntax.Parse": QFunc(['string', 'Flags'], ['*Regexp', 'error']),
  "runtime.Breakpoint": QFunc([], []),
  "runtime.CPUProfile": QFunc([], ['[]uint8']),
  "runtime.Caller": QFunc(['int'], ['uintptr', 'string', 'int', 'bool']),
  "runtime.Callers": QFunc(['int', '[]uintptr'], ['int']),
  "runtime.FuncForPC": QFunc(['uintptr'], ['*Func']),
  "runtime.GC": QFunc([], []),
  "runtime.GOMAXPROCS": QFunc(['int'], ['int']),
  "runtime.GOROOT": QFunc([], ['string']),
  "runtime.Goexit": QFunc([], []),
  "runtime.GoroutineProfile": QFunc(['[]StackRecord'], ['int', 'bool']),
  "runtime.Gosched": QFunc([], []),
  "runtime.LockOSThread": QFunc([], []),
  "runtime.MemProfile": QFunc(['[]MemProfileRecord', 'bool'], ['int', 'bool']),
  "runtime.NumCPU": QFunc([], ['int']),
  "runtime.NumCgoCall": QFunc([], ['int64']),
  "runtime.NumGoroutine": QFunc([], ['int']),
  "runtime.ReadMemStats": QFunc(['*MemStats'], []),
  "runtime.SetCPUProfileRate": QFunc(['int'], []),
  "runtime.Stack": QFunc(['[]uint8', 'bool'], ['int']),
  "runtime.ThreadCreateProfile": QFunc(['[]StackRecord'], ['int', 'bool']),
  "runtime.UnlockOSThread": QFunc([], []),
  "runtime.Version": QFunc([], ['string']),
  "runtime/debug.PrintStack": QFunc([], []),
  "runtime/debug.Stack": QFunc([], ['[]uint8']),
  "runtime/pprof.Lookup": QFunc(['string'], ['*Profile']),
  "runtime/pprof.NewProfile": QFunc(['string'], ['*Profile']),
  "runtime/pprof.Profiles": QFunc([], ['[]*Profile']),
  "runtime/pprof.StartCPUProfile": QFunc(['io.Writer'], ['error']),
  "runtime/pprof.StopCPUProfile": QFunc([], []),
  "runtime/pprof.WriteHeapProfile": QFunc(['io.Writer'], ['error']),
  "sort.Float64s": QFunc(['[]float64'], []),
  "sort.Float64sAreSorted": QFunc(['[]float64'], ['bool']),
  "sort.Ints": QFunc(['[]int'], []),
  "sort.IntsAreSorted": QFunc(['[]int'], ['bool']),
  "sort.IsSorted": QFunc(['Interface'], ['bool']),
  "sort.SearchFloat64s": QFunc(['[]float64', 'float64'], ['int']),
  "sort.SearchInts": QFunc(['[]int', 'int'], ['int']),
  "sort.SearchStrings": QFunc(['[]string', 'string'], ['int']),
  "sort.Sort": QFunc(['Interface'], []),
  "sort.Strings": QFunc(['[]string'], []),
  "sort.StringsAreSorted": QFunc(['[]string'], ['bool']),
  "strconv.AppendBool": QFunc(['[]uint8', 'bool'], ['[]uint8']),
  "strconv.AppendFloat": QFunc(['[]uint8', 'float64', 'uint8', 'int', 'int'], ['[]uint8']),
  "strconv.AppendInt": QFunc(['[]uint8', 'int64', 'int'], ['[]uint8']),
  "strconv.AppendQuote": QFunc(['[]uint8', 'string'], ['[]uint8']),
  "strconv.AppendQuoteRune": QFunc(['[]uint8', 'int32'], ['[]uint8']),
  "strconv.AppendQuoteRuneToASCII": QFunc(['[]uint8', 'int32'], ['[]uint8']),
  "strconv.AppendQuoteToASCII": QFunc(['[]uint8', 'string'], ['[]uint8']),
  "strconv.AppendUint": QFunc(['[]uint8', 'uint64', 'int'], ['[]uint8']),
  "strconv.Atoi": QFunc(['string'], ['int', 'error']),
  "strconv.CanBackquote": QFunc(['string'], ['bool']),
  "strconv.FormatBool": QFunc(['bool'], ['string']),
  "strconv.FormatFloat": QFunc(['float64', 'uint8', 'int', 'int'], ['string']),
  "strconv.FormatInt": QFunc(['int64', 'int'], ['string']),
  "strconv.FormatUint": QFunc(['uint64', 'int'], ['string']),
  "strconv.IsPrint": QFunc(['int32'], ['bool']),
  "strconv.Itoa": QFunc(['int'], ['string']),
  "strconv.ParseBool": QFunc(['string'], ['bool', 'error']),
  "strconv.ParseFloat": QFunc(['string', 'int'], ['float64', 'error']),
  "strconv.ParseInt": QFunc(['string', 'int', 'int'], ['int64', 'error']),
  "strconv.ParseUint": QFunc(['string', 'int', 'int'], ['uint64', 'error']),
  "strconv.Quote": QFunc(['string'], ['string']),
  "strconv.QuoteRune": QFunc(['int32'], ['string']),
  "strconv.QuoteRuneToASCII": QFunc(['int32'], ['string']),
  "strconv.QuoteToASCII": QFunc(['string'], ['string']),
  "strconv.Unquote": QFunc(['string'], ['string', 'error']),
  "strconv.UnquoteChar": QFunc(['string', 'uint8'], ['int32', 'bool', 'string', 'error']),
  "strings.Contains": QFunc(['string', 'string'], ['bool']),
  "strings.ContainsAny": QFunc(['string', 'string'], ['bool']),
  "strings.ContainsRune": QFunc(['string', 'int32'], ['bool']),
  "strings.Count": QFunc(['string', 'string'], ['int']),
  "strings.EqualFold": QFunc(['string', 'string'], ['bool']),
  "strings.Fields": QFunc(['string'], ['[]string']),
  "strings.HasPrefix": QFunc(['string', 'string'], ['bool']),
  "strings.HasSuffix": QFunc(['string', 'string'], ['bool']),
  "strings.Index": QFunc(['string', 'string'], ['int']),
  "strings.IndexAny": QFunc(['string', 'string'], ['int']),
  "strings.IndexRune": QFunc(['string', 'int32'], ['int']),
  "strings.Join": QFunc(['[]string', 'string'], ['string']),
  "strings.LastIndex": QFunc(['string', 'string'], ['int']),
  "strings.LastIndexAny": QFunc(['string', 'string'], ['int']),
  "strings.NewReader": QFunc(['string'], ['*Reader']),
  "strings.Repeat": QFunc(['string', 'int'], ['string']),
  "strings.Replace": QFunc(['string', 'string', 'string', 'int'], ['string']),
  "strings.Split": QFunc(['string', 'string'], ['[]string']),
  "strings.SplitAfter": QFunc(['string', 'string'], ['[]string']),
  "strings.SplitAfterN": QFunc(['string', 'string', 'int'], ['[]string']),
  "strings.SplitN": QFunc(['string', 'string', 'int'], ['[]string']),
  "strings.Title": QFunc(['string'], ['string']),
  "strings.ToLower": QFunc(['string'], ['string']),
  "strings.ToTitle": QFunc(['string'], ['string']),
  "strings.ToUpper": QFunc(['string'], ['string']),
  "strings.Trim": QFunc(['string', 'string'], ['string']),
  "strings.TrimLeft": QFunc(['string', 'string'], ['string']),
  "strings.TrimRight": QFunc(['string', 'string'], ['string']),
  "strings.TrimSpace": QFunc(['string'], ['string']),
  "sync.NewCond": QFunc(['Locker'], ['*Cond']),
  "sync/atomic.AddInt32": QFunc(['*int32', 'int32'], ['int32']),
  "sync/atomic.AddInt64": QFunc(['*int64', 'int64'], ['int64']),
  "sync/atomic.AddUint32": QFunc(['*uint32', 'uint32'], ['uint32']),
  "sync/atomic.AddUint64": QFunc(['*uint64', 'uint64'], ['uint64']),
  "sync/atomic.AddUintptr": QFunc(['*uintptr', 'uintptr'], ['uintptr']),
  "sync/atomic.CompareAndSwapInt32": QFunc(['*int32', 'int32', 'int32'], ['bool']),
  "sync/atomic.CompareAndSwapInt64": QFunc(['*int64', 'int64', 'int64'], ['bool']),
  "sync/atomic.CompareAndSwapUint32": QFunc(['*uint32', 'uint32', 'uint32'], ['bool']),
  "sync/atomic.CompareAndSwapUint64": QFunc(['*uint64', 'uint64', 'uint64'], ['bool']),
  "sync/atomic.CompareAndSwapUintptr": QFunc(['*uintptr', 'uintptr', 'uintptr'], ['bool']),
  "sync/atomic.LoadInt32": QFunc(['*int32'], ['int32']),
  "sync/atomic.LoadInt64": QFunc(['*int64'], ['int64']),
  "sync/atomic.LoadUint32": QFunc(['*uint32'], ['uint32']),
  "sync/atomic.LoadUint64": QFunc(['*uint64'], ['uint64']),
  "sync/atomic.LoadUintptr": QFunc(['*uintptr'], ['uintptr']),
  "sync/atomic.StoreInt32": QFunc(['*int32', 'int32'], []),
  "sync/atomic.StoreInt64": QFunc(['*int64', 'int64'], []),
  "sync/atomic.StoreUint32": QFunc(['*uint32', 'uint32'], []),
  "sync/atomic.StoreUint64": QFunc(['*uint64', 'uint64'], []),
  "sync/atomic.StoreUintptr": QFunc(['*uintptr', 'uintptr'], []),
  "syscall.Chdir": QFunc(['string'], ['error']),
  "syscall.Chmod": QFunc(['string', 'uint32'], ['error']),
  "syscall.Chown": QFunc(['string', 'int', 'int'], ['error']),
  "syscall.Clearenv": QFunc([], []),
  "syscall.Environ": QFunc([], ['[]string']),
  "syscall.Exec": QFunc(['string', '[]string', '[]string'], ['error']),
  "syscall.Exit": QFunc(['int'], []),
  "syscall.Getegid": QFunc([], ['int']),
  "syscall.Getenv": QFunc(['string'], ['string', 'bool']),
  "syscall.Geteuid": QFunc([], ['int']),
  "syscall.Getgid": QFunc([], ['int']),
  "syscall.Getgroups": QFunc([], ['[]int', 'error']),
  "syscall.Getpagesize": QFunc([], ['int']),
  "syscall.Getpid": QFunc([], ['int']),
  "syscall.Getppid": QFunc([], ['int']),
  "syscall.Gettimeofday": QFunc(['*Timeval'], ['error']),
  "syscall.Getuid": QFunc([], ['int']),
  "syscall.Getwd": QFunc([], ['string', 'error']),
  "syscall.Lchown": QFunc(['string', 'int', 'int'], ['error']),
  "syscall.Link": QFunc(['string', 'string'], ['error']),
  "syscall.Mkdir": QFunc(['string', 'uint32'], ['error']),
  "syscall.NsecToTimeval": QFunc(['int64'], ['Timeval']),
  "syscall.Readlink": QFunc(['string', '[]uint8'], ['int', 'error']),
  "syscall.Rename": QFunc(['string', 'string'], ['error']),
  "syscall.Rmdir": QFunc(['string'], ['error']),
  "syscall.Setenv": QFunc(['string', 'string'], ['error']),
  "syscall.StartProcess": QFunc(['string', '[]string', '*ProcAttr'], ['int', 'uintptr', 'error']),
  "syscall.StringBytePtr": QFunc(['string'], ['*uint8']),
  "syscall.StringByteSlice": QFunc(['string'], ['[]uint8']),
  "syscall.Symlink": QFunc(['string', 'string'], ['error']),
  "syscall.Unlink": QFunc(['string'], ['error']),
  "syscall.Utimes": QFunc(['string', '[]Timeval'], ['error']),
  "testing.Short": QFunc([], ['bool']),
  "testing/iotest.DataErrReader": QFunc(['io.Reader'], ['io.Reader']),
  "testing/iotest.HalfReader": QFunc(['io.Reader'], ['io.Reader']),
  "testing/iotest.NewReadLogger": QFunc(['string', 'io.Reader'], ['io.Reader']),
  "testing/iotest.NewWriteLogger": QFunc(['string', 'io.Writer'], ['io.Writer']),
  "testing/iotest.OneByteReader": QFunc(['io.Reader'], ['io.Reader']),
  "testing/iotest.TimeoutReader": QFunc(['io.Reader'], ['io.Reader']),
  "testing/iotest.TruncateWriter": QFunc(['io.Writer', 'int64'], ['io.Writer']),
  "text/scanner.TokenString": QFunc(['int32'], ['string']),
  "text/tabwriter.NewWriter": QFunc(['io.Writer', 'int', 'int', 'int', 'uint8', 'uint'], ['*Writer']),
  "text/template.HTMLEscape": QFunc(['io.Writer', '[]uint8'], []),
  "text/template.HTMLEscapeString": QFunc(['string'], ['string']),
  "text/template.JSEscape": QFunc(['io.Writer', '[]uint8'], []),
  "text/template.JSEscapeString": QFunc(['string'], ['string']),
  "text/template.Must": QFunc(['*Template', 'error'], ['*Template']),
  "text/template.New": QFunc(['string'], ['*Template']),
  "text/template.ParseGlob": QFunc(['string'], ['*Template', 'error']),
  "text/template/parse.IsEmptyTree": QFunc(['Node'], ['bool']),
  "text/template/parse.NewIdentifier": QFunc(['string'], ['*IdentifierNode']),
  "time.Date": QFunc(['int', 'time.Month', 'int', 'int', 'int', 'int', 'int', '*time.Location'], ['time.Time']),
  "time.FixedZone": QFunc(['string', 'int'], ['*time.Location']),
  "time.LoadLocation": QFunc(['string'], ['*time.Location', 'error']),
  "time.NewTicker": QFunc(['time.Duration'], ['*time.Ticker']),
  "time.NewTimer": QFunc(['time.Duration'], ['*time.Timer']),
  "time.Now": QFunc([], ['time.Time']),
  "time.Parse": QFunc(['string', 'string'], ['time.Time', 'error']),
  "time.ParseDuration": QFunc(['string'], ['time.Duration', 'error']),
  "time.Since": QFunc(['time.Time'], ['time.Duration']),
  "time.Sleep": QFunc(['time.Duration'], []),
  "time.Unix": QFunc(['int64', 'int64'], ['time.Time']),
  "unicode.Is": QFunc(['*RangeTable', 'int32'], ['bool']),
  "unicode.IsControl": QFunc(['int32'], ['bool']),
  "unicode.IsDigit": QFunc(['int32'], ['bool']),
  "unicode.IsGraphic": QFunc(['int32'], ['bool']),
  "unicode.IsLetter": QFunc(['int32'], ['bool']),
  "unicode.IsLower": QFunc(['int32'], ['bool']),
  "unicode.IsMark": QFunc(['int32'], ['bool']),
  "unicode.IsNumber": QFunc(['int32'], ['bool']),
  "unicode.IsOneOf": QFunc(['[]*RangeTable', 'int32'], ['bool']),
  "unicode.IsPrint": QFunc(['int32'], ['bool']),
  "unicode.IsPunct": QFunc(['int32'], ['bool']),
  "unicode.IsSpace": QFunc(['int32'], ['bool']),
  "unicode.IsSymbol": QFunc(['int32'], ['bool']),
  "unicode.IsTitle": QFunc(['int32'], ['bool']),
  "unicode.IsUpper": QFunc(['int32'], ['bool']),
  "unicode.SimpleFold": QFunc(['int32'], ['int32']),
  "unicode.To": QFunc(['int', 'int32'], ['int32']),
  "unicode.ToLower": QFunc(['int32'], ['int32']),
  "unicode.ToTitle": QFunc(['int32'], ['int32']),
  "unicode.ToUpper": QFunc(['int32'], ['int32']),
  "unicode/utf16.Decode": QFunc(['[]uint16'], ['[]int32']),
  "unicode/utf16.DecodeRune": QFunc(['int32', 'int32'], ['int32']),
  "unicode/utf16.Encode": QFunc(['[]int32'], ['[]uint16']),
  "unicode/utf16.EncodeRune": QFunc(['int32'], ['int32', 'int32']),
  "unicode/utf16.IsSurrogate": QFunc(['int32'], ['bool']),
  "unicode/utf8.DecodeLastRune": QFunc(['[]uint8'], ['int32', 'int']),
  "unicode/utf8.DecodeLastRuneInString": QFunc(['string'], ['int32', 'int']),
  "unicode/utf8.DecodeRune": QFunc(['[]uint8'], ['int32', 'int']),
  "unicode/utf8.DecodeRuneInString": QFunc(['string'], ['int32', 'int']),
  "unicode/utf8.EncodeRune": QFunc(['[]uint8', 'int32'], ['int']),
  "unicode/utf8.FullRune": QFunc(['[]uint8'], ['bool']),
  "unicode/utf8.FullRuneInString": QFunc(['string'], ['bool']),
  "unicode/utf8.RuneCount": QFunc(['[]uint8'], ['int']),
  "unicode/utf8.RuneCountInString": QFunc(['string'], ['int']),
  "unicode/utf8.RuneLen": QFunc(['int32'], ['int']),
  "unicode/utf8.RuneStart": QFunc(['uint8'], ['bool']),
  "unicode/utf8.Valid": QFunc(['[]uint8'], ['bool']),
  "unicode/utf8.ValidString": QFunc(['string'], ['bool']),

  }

QMeths = {
  "Add": QMeth('Add', ('string', 'string'), (), 'signature_Add__string_also_string_return_', 'Add (string, string) ()'),
  "AddDate": QMeth('AddDate', ('int', 'int', 'int'), ('time.Time',), 'signature_AddDate__int_also_int_also_int_return_time_2eTime', 'AddDate (int, int, int) (time.Time)'),
  "AddFloat": QMeth('AddFloat', ('string', 'float64'), (), 'signature_AddFloat__string_also_float64_return_', 'AddFloat (string, float64) ()'),
  "AddLine": QMeth('AddLine', ('int',), (), 'signature_AddLine__int_return_', 'AddLine (int) ()'),
  "AddLineInfo": QMeth('AddLineInfo', ('int', 'string', 'int'), (), 'signature_AddLineInfo__int_also_string_also_int_return_', 'AddLineInfo (int, string, int) ()'),
  "Addr": QMeth('Addr', (), ('reflect.Value',), 'signature_Addr___return_reflect_2eValue', 'Addr () (reflect.Value)'),
  "After": QMeth('After', ('time.Time',), ('bool',), 'signature_After__time_2eTime_return_bool', 'After (time.Time) (bool)'),
  "AppendCertsFromPEM": QMeth('AppendCertsFromPEM', ('[]uint8',), ('bool',), 'signature_AppendCertsFromPEM___5b_5duint8_return_bool', 'AppendCertsFromPEM ([]uint8) (bool)'),
  "Arg": QMeth('Arg', ('int',), ('string',), 'signature_Arg__int_return_string', 'Arg (int) (string)'),
  "Args": QMeth('Args', (), ('[]string',), 'signature_Args___return__5b_5dstring', 'Args () ([]string)'),
  "At": QMeth('At', ('int',), ('int',), 'signature_At__int_return_int', 'At (int) (int)'),
  "Available": QMeth('Available', (), ('int',), 'signature_Available___return_int', 'Available () (int)'),
  "Base": QMeth('Base', (), ('int',), 'signature_Base___return_int', 'Base () (int)'),
  "BaseName": QMeth('BaseName', (), ('string',), 'signature_BaseName___return_string', 'BaseName () (string)'),
  "Before": QMeth('Before', ('time.Time',), ('bool',), 'signature_Before__time_2eTime_return_bool', 'Before (time.Time) (bool)'),
  "Bit": QMeth('Bit', ('int',), ('uint',), 'signature_Bit__int_return_uint', 'Bit (int) (uint)'),
  "BitLen": QMeth('BitLen', (), ('int',), 'signature_BitLen___return_int', 'BitLen () (int)'),
  "Bool": QMeth('Bool', ('string', 'bool', 'string'), ('*bool',), 'signature_Bool__string_also_bool_also_string_return__2abool', 'Bool (string, bool, string) (*bool)'),
  "BoolVar": QMeth('BoolVar', ('*bool', 'string', 'bool', 'string'), (), 'signature_BoolVar___2abool_also_string_also_bool_also_string_return_', 'BoolVar (*bool, string, bool, string) ()'),
  "Boundary": QMeth('Boundary', (), ('string',), 'signature_Boundary___return_string', 'Boundary () (string)'),
  "Broadcast": QMeth('Broadcast', (), (), 'signature_Broadcast___return_', 'Broadcast () ()'),
  "Buffered": QMeth('Buffered', (), ('int',), 'signature_Buffered___return_int', 'Buffered () (int)'),
  "BuildNameToCertificate": QMeth('BuildNameToCertificate', (), (), 'signature_BuildNameToCertificate___return_', 'BuildNameToCertificate () ()'),
  "Bytes": QMeth('Bytes', (), ('[]uint8',), 'signature_Bytes___return__5b_5duint8', 'Bytes () ([]uint8)'),
  "COffset": QMeth('COffset', ('int', 'int'), ('int',), 'signature_COffset__int_also_int_return_int', 'COffset (int, int) (int)'),
  "Call": QMeth('Call', ('[]reflect.Value',), ('[]reflect.Value',), 'signature_Call___5b_5dreflect_2eValue_return__5b_5dreflect_2eValue', 'Call ([]reflect.Value) ([]reflect.Value)'),
  "CallSlice": QMeth('CallSlice', ('[]reflect.Value',), ('[]reflect.Value',), 'signature_CallSlice___5b_5dreflect_2eValue_return__5b_5dreflect_2eValue', 'CallSlice ([]reflect.Value) ([]reflect.Value)'),
  "CanAddr": QMeth('CanAddr', (), ('bool',), 'signature_CanAddr___return_bool', 'CanAddr () (bool)'),
  "CanInterface": QMeth('CanInterface', (), ('bool',), 'signature_CanInterface___return_bool', 'CanInterface () (bool)'),
  "CanSet": QMeth('CanSet', (), ('bool',), 'signature_CanSet___return_bool', 'CanSet () (bool)'),
  "Cap": QMeth('Cap', (), ('int',), 'signature_Cap___return_int', 'Cap () (int)'),
  "CapNames": QMeth('CapNames', (), ('[]string',), 'signature_CapNames___return__5b_5dstring', 'CapNames () ([]string)'),
  "Chdir": QMeth('Chdir', (), ('error',), 'signature_Chdir___return_error', 'Chdir () (error)'),
  "Chmod": QMeth('Chmod', ('os.FileMode',), ('error',), 'signature_Chmod__os_2eFileMode_return_error', 'Chmod (os.FileMode) (error)'),
  "Chown": QMeth('Chown', ('int', 'int'), ('error',), 'signature_Chown__int_also_int_return_error', 'Chown (int, int) (error)'),
  "Clock": QMeth('Clock', (), ('int', 'int', 'int'), 'signature_Clock___return_int_also_int_also_int', 'Clock () (int, int, int)'),
  "Close": QMeth('Close', (), ('error',), 'signature_Close___return_error', 'Close () (error)'),
  "CloseClientConnections": QMeth('CloseClientConnections', (), (), 'signature_CloseClientConnections___return_', 'CloseClientConnections () ()'),
  "CloseIdleConnections": QMeth('CloseIdleConnections', (), (), 'signature_CloseIdleConnections___return_', 'CloseIdleConnections () ()'),
  "CloseRead": QMeth('CloseRead', (), ('error',), 'signature_CloseRead___return_error', 'CloseRead () (error)'),
  "CloseWithError": QMeth('CloseWithError', ('error',), ('error',), 'signature_CloseWithError__error_return_error', 'CloseWithError (error) (error)'),
  "CloseWrite": QMeth('CloseWrite', (), ('error',), 'signature_CloseWrite___return_error', 'CloseWrite () (error)'),
  "ColorIndexAt": QMeth('ColorIndexAt', ('int', 'int'), ('uint8',), 'signature_ColorIndexAt__int_also_int_return_uint8', 'ColorIndexAt (int, int) (uint8)'),
  "Columns": QMeth('Columns', (), ('[]string', 'error'), 'signature_Columns___return__5b_5dstring_also_error', 'Columns () ([]string, error)'),
  "CombinedOutput": QMeth('CombinedOutput', (), ('[]uint8', 'error'), 'signature_CombinedOutput___return__5b_5duint8_also_error', 'CombinedOutput () ([]uint8, error)'),
  "Commit": QMeth('Commit', (), ('error',), 'signature_Commit___return_error', 'Commit () (error)'),
  "Continued": QMeth('Continued', (), ('bool',), 'signature_Continued___return_bool', 'Continued () (bool)'),
  "CoreDump": QMeth('CoreDump', (), ('bool',), 'signature_CoreDump___return_bool', 'CoreDump () (bool)'),
  "Count": QMeth('Count', (), ('int',), 'signature_Count___return_int', 'Count () (int)'),
  "Create": QMeth('Create', ('string',), ('io.Writer', 'error'), 'signature_Create__string_return_io_2eWriter_also_error', 'Create (string) (io.Writer, error)'),
  "CreateFormField": QMeth('CreateFormField', ('string',), ('io.Writer', 'error'), 'signature_CreateFormField__string_return_io_2eWriter_also_error', 'CreateFormField (string) (io.Writer, error)'),
  "CreateFormFile": QMeth('CreateFormFile', ('string', 'string'), ('io.Writer', 'error'), 'signature_CreateFormFile__string_also_string_return_io_2eWriter_also_error', 'CreateFormFile (string, string) (io.Writer, error)'),
  "Data": QMeth('Data', (), ('[]uint8', 'error'), 'signature_Data___return__5b_5duint8_also_error', 'Data () ([]uint8, error)'),
  "Date": QMeth('Date', (), ('time.Time', 'error'), 'signature_Date___return_time_2eTime_also_error', 'Date () (time.Time, error)'),
  "Day": QMeth('Day', (), ('int',), 'signature_Day___return_int', 'Day () (int)'),
  "Decode": QMeth('Decode', ('[]uint8', '[]uint8'), ('int', 'error'), 'signature_Decode___5b_5duint8_also__5b_5duint8_return_int_also_error', 'Decode ([]uint8, []uint8) (int, error)'),
  "DecodeString": QMeth('DecodeString', ('string',), ('[]uint8', 'error'), 'signature_DecodeString__string_return__5b_5duint8_also_error', 'DecodeString (string) ([]uint8, error)'),
  "DecodeValue": QMeth('DecodeValue', ('reflect.Value',), ('error',), 'signature_DecodeValue__reflect_2eValue_return_error', 'DecodeValue (reflect.Value) (error)'),
  "DecodedLen": QMeth('DecodedLen', ('int',), ('int',), 'signature_DecodedLen__int_return_int', 'DecodedLen (int) (int)'),
  "Defn": QMeth('Defn', (), ('string',), 'signature_Defn___return_string', 'Defn () (string)'),
  "Del": QMeth('Del', ('string',), (), 'signature_Del__string_return_', 'Del (string) ()'),
  "Done": QMeth('Done', (), (), 'signature_Done___return_', 'Done () ()'),
  "DotReader": QMeth('DotReader', (), ('io.Reader',), 'signature_DotReader___return_io_2eReader', 'DotReader () (io.Reader)'),
  "DotWriter": QMeth('DotWriter', (), ('io.WriteCloser',), 'signature_DotWriter___return_io_2eWriteCloser', 'DotWriter () (io.WriteCloser)'),
  "Duration": QMeth('Duration', ('string', 'time.Duration', 'string'), ('*time.Duration',), 'signature_Duration__string_also_time_2eDuration_also_string_return__2atime_2eDuration', 'Duration (string, time.Duration, string) (*time.Duration)'),
  "DurationVar": QMeth('DurationVar', ('*time.Duration', 'string', 'time.Duration', 'string'), (), 'signature_DurationVar___2atime_2eDuration_also_string_also_time_2eDuration_also_string_return_', 'DurationVar (*time.Duration, string, time.Duration, string) ()'),
  "Dx": QMeth('Dx', (), ('int',), 'signature_Dx___return_int', 'Dx () (int)'),
  "Dy": QMeth('Dy', (), ('int',), 'signature_Dy___return_int', 'Dy () (int)'),
  "Elem": QMeth('Elem', (), ('reflect.Value',), 'signature_Elem___return_reflect_2eValue', 'Elem () (reflect.Value)'),
  "Empty": QMeth('Empty', (), ('bool',), 'signature_Empty___return_bool', 'Empty () (bool)'),
  "Encode": QMeth('Encode', ('[]uint8', '[]uint8'), (), 'signature_Encode___5b_5duint8_also__5b_5duint8_return_', 'Encode ([]uint8, []uint8) ()'),
  "EncodeToString": QMeth('EncodeToString', ('[]uint8',), ('string',), 'signature_EncodeToString___5b_5duint8_return_string', 'EncodeToString ([]uint8) (string)'),
  "EncodeValue": QMeth('EncodeValue', ('reflect.Value',), ('error',), 'signature_EncodeValue__reflect_2eValue_return_error', 'EncodeValue (reflect.Value) (error)'),
  "EncodedLen": QMeth('EncodedLen', ('int',), ('int',), 'signature_EncodedLen__int_return_int', 'EncodedLen (int) (int)'),
  "EndRequest": QMeth('EndRequest', ('uint',), (), 'signature_EndRequest__uint_return_', 'EndRequest (uint) ()'),
  "EndResponse": QMeth('EndResponse', ('uint',), (), 'signature_EndResponse__uint_return_', 'EndResponse (uint) ()'),
  "Entry": QMeth('Entry', (), ('uintptr',), 'signature_Entry___return_uintptr', 'Entry () (uintptr)'),
  "Equal": QMeth('Equal', ('time.Time',), ('bool',), 'signature_Equal__time_2eTime_return_bool', 'Equal (time.Time) (bool)'),
  "Err": QMeth('Err', (), ('error',), 'signature_Err___return_error', 'Err () (error)'),
  "Error": QMeth('Error', (), ('string',), 'signature_Error___return_string', 'Error () (string)'),
  "ExitStatus": QMeth('ExitStatus', (), ('int',), 'signature_ExitStatus___return_int', 'ExitStatus () (int)'),
  "Exited": QMeth('Exited', (), ('bool',), 'signature_Exited___return_bool', 'Exited () (bool)'),
  "ExpFloat64": QMeth('ExpFloat64', (), ('float64',), 'signature_ExpFloat64___return_float64', 'ExpFloat64 () (float64)'),
  "Expand": QMeth('Expand', ('[]uint8', '[]uint8', '[]uint8', '[]int'), ('[]uint8',), 'signature_Expand___5b_5duint8_also__5b_5duint8_also__5b_5duint8_also__5b_5dint_return__5b_5duint8', 'Expand ([]uint8, []uint8, []uint8, []int) ([]uint8)'),
  "ExpandString": QMeth('ExpandString', ('[]uint8', 'string', 'string', '[]int'), ('[]uint8',), 'signature_ExpandString___5b_5duint8_also_string_also_string_also__5b_5dint_return__5b_5duint8', 'ExpandString ([]uint8, string, string, []int) ([]uint8)'),
  "Extension": QMeth('Extension', ('string',), ('bool', 'string'), 'signature_Extension__string_return_bool_also_string', 'Extension (string) (bool, string)'),
  "Fail": QMeth('Fail', (), (), 'signature_Fail___return_', 'Fail () ()'),
  "FailNow": QMeth('FailNow', (), (), 'signature_FailNow___return_', 'FailNow () ()'),
  "Failed": QMeth('Failed', (), ('bool',), 'signature_Failed___return_bool', 'Failed () (bool)'),
  "Fd": QMeth('Fd', (), ('uintptr',), 'signature_Fd___return_uintptr', 'Fd () (uintptr)'),
  "Field": QMeth('Field', ('int',), ('reflect.Value',), 'signature_Field__int_return_reflect_2eValue', 'Field (int) (reflect.Value)'),
  "FieldByIndex": QMeth('FieldByIndex', ('[]int',), ('reflect.Value',), 'signature_FieldByIndex___5b_5dint_return_reflect_2eValue', 'FieldByIndex ([]int) (reflect.Value)'),
  "FieldByName": QMeth('FieldByName', ('string',), ('reflect.Value',), 'signature_FieldByName__string_return_reflect_2eValue', 'FieldByName (string) (reflect.Value)'),
  "File": QMeth('File', (), ('*os.File', 'error'), 'signature_File___return__2aos_2eFile_also_error', 'File () (*os.File, error)'),
  "FileInfo": QMeth('FileInfo', (), ('os.FileInfo',), 'signature_FileInfo___return_os_2eFileInfo', 'FileInfo () (os.FileInfo)'),
  "FileLine": QMeth('FileLine', ('uintptr',), ('string', 'int'), 'signature_FileLine__uintptr_return_string_also_int', 'FileLine (uintptr) (string, int)'),
  "FileName": QMeth('FileName', (), ('string',), 'signature_FileName___return_string', 'FileName () (string)'),
  "Find": QMeth('Find', ('[]uint8',), ('[]uint8',), 'signature_Find___5b_5duint8_return__5b_5duint8', 'Find ([]uint8) ([]uint8)'),
  "FindAll": QMeth('FindAll', ('[]uint8', 'int'), ('[][]uint8',), 'signature_FindAll___5b_5duint8_also_int_return__5b_5d_5b_5duint8', 'FindAll ([]uint8, int) ([][]uint8)'),
  "FindAllIndex": QMeth('FindAllIndex', ('[]uint8', 'int'), ('[][]int',), 'signature_FindAllIndex___5b_5duint8_also_int_return__5b_5d_5b_5dint', 'FindAllIndex ([]uint8, int) ([][]int)'),
  "FindAllString": QMeth('FindAllString', ('string', 'int'), ('[]string',), 'signature_FindAllString__string_also_int_return__5b_5dstring', 'FindAllString (string, int) ([]string)'),
  "FindAllStringIndex": QMeth('FindAllStringIndex', ('string', 'int'), ('[][]int',), 'signature_FindAllStringIndex__string_also_int_return__5b_5d_5b_5dint', 'FindAllStringIndex (string, int) ([][]int)'),
  "FindAllStringSubmatch": QMeth('FindAllStringSubmatch', ('string', 'int'), ('[][]string',), 'signature_FindAllStringSubmatch__string_also_int_return__5b_5d_5b_5dstring', 'FindAllStringSubmatch (string, int) ([][]string)'),
  "FindAllStringSubmatchIndex": QMeth('FindAllStringSubmatchIndex', ('string', 'int'), ('[][]int',), 'signature_FindAllStringSubmatchIndex__string_also_int_return__5b_5d_5b_5dint', 'FindAllStringSubmatchIndex (string, int) ([][]int)'),
  "FindAllSubmatch": QMeth('FindAllSubmatch', ('[]uint8', 'int'), ('[][][]uint8',), 'signature_FindAllSubmatch___5b_5duint8_also_int_return__5b_5d_5b_5d_5b_5duint8', 'FindAllSubmatch ([]uint8, int) ([][][]uint8)'),
  "FindAllSubmatchIndex": QMeth('FindAllSubmatchIndex', ('[]uint8', 'int'), ('[][]int',), 'signature_FindAllSubmatchIndex___5b_5duint8_also_int_return__5b_5d_5b_5dint', 'FindAllSubmatchIndex ([]uint8, int) ([][]int)'),
  "FindIndex": QMeth('FindIndex', ('[]uint8',), ('[]int',), 'signature_FindIndex___5b_5duint8_return__5b_5dint', 'FindIndex ([]uint8) ([]int)'),
  "FindReaderIndex": QMeth('FindReaderIndex', ('io.RuneReader',), ('[]int',), 'signature_FindReaderIndex__io_2eRuneReader_return__5b_5dint', 'FindReaderIndex (io.RuneReader) ([]int)'),
  "FindReaderSubmatchIndex": QMeth('FindReaderSubmatchIndex', ('io.RuneReader',), ('[]int',), 'signature_FindReaderSubmatchIndex__io_2eRuneReader_return__5b_5dint', 'FindReaderSubmatchIndex (io.RuneReader) ([]int)'),
  "FindString": QMeth('FindString', ('string',), ('string',), 'signature_FindString__string_return_string', 'FindString (string) (string)'),
  "FindStringIndex": QMeth('FindStringIndex', ('string',), ('[]int',), 'signature_FindStringIndex__string_return__5b_5dint', 'FindStringIndex (string) ([]int)'),
  "FindStringSubmatch": QMeth('FindStringSubmatch', ('string',), ('[]string',), 'signature_FindStringSubmatch__string_return__5b_5dstring', 'FindStringSubmatch (string) ([]string)'),
  "FindStringSubmatchIndex": QMeth('FindStringSubmatchIndex', ('string',), ('[]int',), 'signature_FindStringSubmatchIndex__string_return__5b_5dint', 'FindStringSubmatchIndex (string) ([]int)'),
  "FindSubmatch": QMeth('FindSubmatch', ('[]uint8',), ('[][]uint8',), 'signature_FindSubmatch___5b_5duint8_return__5b_5d_5b_5duint8', 'FindSubmatch ([]uint8) ([][]uint8)'),
  "FindSubmatchIndex": QMeth('FindSubmatchIndex', ('[]uint8',), ('[]int',), 'signature_FindSubmatchIndex___5b_5duint8_return__5b_5dint', 'FindSubmatchIndex ([]uint8) ([]int)'),
  "Flags": QMeth('Flags', (), ('int',), 'signature_Flags___return_int', 'Flags () (int)'),
  "Float": QMeth('Float', (), ('float64',), 'signature_Float___return_float64', 'Float () (float64)'),
  "Float32": QMeth('Float32', (), ('float32',), 'signature_Float32___return_float32', 'Float32 () (float32)'),
  "Float64": QMeth('Float64', ('string', 'float64', 'string'), ('*float64',), 'signature_Float64__string_also_float64_also_string_return__2afloat64', 'Float64 (string, float64, string) (*float64)'),
  "Float64Var": QMeth('Float64Var', ('*float64', 'string', 'float64', 'string'), (), 'signature_Float64Var___2afloat64_also_string_also_float64_also_string_return_', 'Float64Var (*float64, string, float64, string) ()'),
  "FloatString": QMeth('FloatString', ('int',), ('string',), 'signature_FloatString__int_return_string', 'FloatString (int) (string)'),
  "Flush": QMeth('Flush', (), ('error',), 'signature_Flush___return_error', 'Flush () (error)'),
  "FormDataContentType": QMeth('FormDataContentType', (), ('string',), 'signature_FormDataContentType___return_string', 'FormDataContentType () (string)'),
  "FormName": QMeth('FormName', (), ('string',), 'signature_FormName___return_string', 'FormName () (string)'),
  "FormValue": QMeth('FormValue', ('string',), ('string',), 'signature_FormValue__string_return_string', 'FormValue (string) (string)'),
  "Format": QMeth('Format', ('string',), ('string',), 'signature_Format__string_return_string', 'Format (string) (string)'),
  "Get": QMeth('Get', ('string',), ('string',), 'signature_Get__string_return_string', 'Get (string) (string)'),
  "GoString": QMeth('GoString', (), ('string',), 'signature_GoString___return_string', 'GoString () (string)'),
  "GobDecode": QMeth('GobDecode', ('[]uint8',), ('error',), 'signature_GobDecode___5b_5duint8_return_error', 'GobDecode ([]uint8) (error)'),
  "GobEncode": QMeth('GobEncode', (), ('[]uint8', 'error'), 'signature_GobEncode___return__5b_5duint8_also_error', 'GobEncode () ([]uint8, error)'),
  "HandleHTTP": QMeth('HandleHTTP', ('string', 'string'), (), 'signature_HandleHTTP__string_also_string_return_', 'HandleHTTP (string, string) ()'),
  "Handshake": QMeth('Handshake', (), ('error',), 'signature_Handshake___return_error', 'Handshake () (error)'),
  "HasExpired": QMeth('HasExpired', ('time.Time',), ('bool',), 'signature_HasExpired__time_2eTime_return_bool', 'HasExpired (time.Time) (bool)'),
  "Hour": QMeth('Hour', (), ('int',), 'signature_Hour___return_int', 'Hour () (int)'),
  "Hours": QMeth('Hours', (), ('float64',), 'signature_Hours___return_float64', 'Hours () (float64)'),
  "ISOWeek": QMeth('ISOWeek', (), ('int', 'int'), 'signature_ISOWeek___return_int_also_int', 'ISOWeek () (int, int)'),
  "ImportedLibraries": QMeth('ImportedLibraries', (), ('[]string', 'error'), 'signature_ImportedLibraries___return__5b_5dstring_also_error', 'ImportedLibraries () ([]string, error)'),
  "ImportedSymbols": QMeth('ImportedSymbols', (), ('[]string', 'error'), 'signature_ImportedSymbols___return__5b_5dstring_also_error', 'ImportedSymbols () ([]string, error)'),
  "In": QMeth('In', ('*time.Location',), ('time.Time',), 'signature_In___2atime_2eLocation_return_time_2eTime', 'In (*time.Location) (time.Time)'),
  "InUseBytes": QMeth('InUseBytes', (), ('int64',), 'signature_InUseBytes___return_int64', 'InUseBytes () (int64)'),
  "InUseObjects": QMeth('InUseObjects', (), ('int64',), 'signature_InUseObjects___return_int64', 'InUseObjects () (int64)'),
  "Index": QMeth('Index', ('int',), ('reflect.Value',), 'signature_Index__int_return_reflect_2eValue', 'Index (int) (reflect.Value)'),
  "Int": QMeth('Int', ('string', 'int', 'string'), ('*int',), 'signature_Int__string_also_int_also_string_return__2aint', 'Int (string, int, string) (*int)'),
  "Int31": QMeth('Int31', (), ('int32',), 'signature_Int31___return_int32', 'Int31 () (int32)'),
  "Int31n": QMeth('Int31n', ('int32',), ('int32',), 'signature_Int31n__int32_return_int32', 'Int31n (int32) (int32)'),
  "Int63": QMeth('Int63', (), ('int64',), 'signature_Int63___return_int64', 'Int63 () (int64)'),
  "Int63n": QMeth('Int63n', ('int64',), ('int64',), 'signature_Int63n__int64_return_int64', 'Int63n (int64) (int64)'),
  "Int64": QMeth('Int64', ('string', 'int64', 'string'), ('*int64',), 'signature_Int64__string_also_int64_also_string_return__2aint64', 'Int64 (string, int64, string) (*int64)'),
  "Int64Var": QMeth('Int64Var', ('*int64', 'string', 'int64', 'string'), (), 'signature_Int64Var___2aint64_also_string_also_int64_also_string_return_', 'Int64Var (*int64, string, int64, string) ()'),
  "IntVar": QMeth('IntVar', ('*int', 'string', 'int', 'string'), (), 'signature_IntVar___2aint_also_string_also_int_also_string_return_', 'IntVar (*int, string, int, string) ()'),
  "Intn": QMeth('Intn', ('int',), ('int',), 'signature_Intn__int_return_int', 'Intn (int) (int)'),
  "IsAbs": QMeth('IsAbs', (), ('bool',), 'signature_IsAbs___return_bool', 'IsAbs () (bool)'),
  "IsCommand": QMeth('IsCommand', (), ('bool',), 'signature_IsCommand___return_bool', 'IsCommand () (bool)'),
  "IsDir": QMeth('IsDir', (), ('bool',), 'signature_IsDir___return_bool', 'IsDir () (bool)'),
  "IsExported": QMeth('IsExported', (), ('bool',), 'signature_IsExported___return_bool', 'IsExported () (bool)'),
  "IsGlobalUnicast": QMeth('IsGlobalUnicast', (), ('bool',), 'signature_IsGlobalUnicast___return_bool', 'IsGlobalUnicast () (bool)'),
  "IsInt": QMeth('IsInt', (), ('bool',), 'signature_IsInt___return_bool', 'IsInt () (bool)'),
  "IsInterfaceLocalMulticast": QMeth('IsInterfaceLocalMulticast', (), ('bool',), 'signature_IsInterfaceLocalMulticast___return_bool', 'IsInterfaceLocalMulticast () (bool)'),
  "IsKeyword": QMeth('IsKeyword', (), ('bool',), 'signature_IsKeyword___return_bool', 'IsKeyword () (bool)'),
  "IsLinkLocalMulticast": QMeth('IsLinkLocalMulticast', (), ('bool',), 'signature_IsLinkLocalMulticast___return_bool', 'IsLinkLocalMulticast () (bool)'),
  "IsLinkLocalUnicast": QMeth('IsLinkLocalUnicast', (), ('bool',), 'signature_IsLinkLocalUnicast___return_bool', 'IsLinkLocalUnicast () (bool)'),
  "IsLiteral": QMeth('IsLiteral', (), ('bool',), 'signature_IsLiteral___return_bool', 'IsLiteral () (bool)'),
  "IsLoopback": QMeth('IsLoopback', (), ('bool',), 'signature_IsLoopback___return_bool', 'IsLoopback () (bool)'),
  "IsMulticast": QMeth('IsMulticast', (), ('bool',), 'signature_IsMulticast___return_bool', 'IsMulticast () (bool)'),
  "IsNil": QMeth('IsNil', (), ('bool',), 'signature_IsNil___return_bool', 'IsNil () (bool)'),
  "IsOperator": QMeth('IsOperator', (), ('bool',), 'signature_IsOperator___return_bool', 'IsOperator () (bool)'),
  "IsUnspecified": QMeth('IsUnspecified', (), ('bool',), 'signature_IsUnspecified___return_bool', 'IsUnspecified () (bool)'),
  "IsValid": QMeth('IsValid', (), ('bool',), 'signature_IsValid___return_bool', 'IsValid () (bool)'),
  "IsZero": QMeth('IsZero', (), ('bool',), 'signature_IsZero___return_bool', 'IsZero () (bool)'),
  "Kill": QMeth('Kill', (), ('error',), 'signature_Kill___return_error', 'Kill () (error)'),
  "Kind": QMeth('Kind', (), ('reflect.Kind',), 'signature_Kind___return_reflect_2eKind', 'Kind () (reflect.Kind)'),
  "LastInsertId": QMeth('LastInsertId', (), ('int64', 'error'), 'signature_LastInsertId___return_int64_also_error', 'LastInsertId () (int64, error)'),
  "Len": QMeth('Len', (), ('int',), 'signature_Len___return_int', 'Len () (int)'),
  "Less": QMeth('Less', ('int', 'int'), ('bool',), 'signature_Less__int_also_int_return_bool', 'Less (int, int) (bool)'),
  "LineCount": QMeth('LineCount', (), ('int',), 'signature_LineCount___return_int', 'LineCount () (int)'),
  "LineToPC": QMeth('LineToPC', ('int', 'uint64'), ('uint64',), 'signature_LineToPC__int_also_uint64_return_uint64', 'LineToPC (int, uint64) (uint64)'),
  "ListenAndServe": QMeth('ListenAndServe', (), ('error',), 'signature_ListenAndServe___return_error', 'ListenAndServe () (error)'),
  "ListenAndServeTLS": QMeth('ListenAndServeTLS', ('string', 'string'), ('error',), 'signature_ListenAndServeTLS__string_also_string_return_error', 'ListenAndServeTLS (string, string) (error)'),
  "LiteralPrefix": QMeth('LiteralPrefix', (), ('string', 'bool'), 'signature_LiteralPrefix___return_string_also_bool', 'LiteralPrefix () (string, bool)'),
  "Local": QMeth('Local', (), ('time.Time',), 'signature_Local___return_time_2eTime', 'Local () (time.Time)'),
  "Location": QMeth('Location', (), ('*time.Location',), 'signature_Location___return__2atime_2eLocation', 'Location () (*time.Location)'),
  "Lock": QMeth('Lock', (), (), 'signature_Lock___return_', 'Lock () ()'),
  "Lookup": QMeth('Lookup', ('[]uint8', 'int'), ('[]int',), 'signature_Lookup___5b_5duint8_also_int_return__5b_5dint', 'Lookup ([]uint8, int) ([]int)'),
  "Mail": QMeth('Mail', ('string',), ('error',), 'signature_Mail__string_return_error', 'Mail (string) (error)'),
  "MapIndex": QMeth('MapIndex', ('reflect.Value',), ('reflect.Value',), 'signature_MapIndex__reflect_2eValue_return_reflect_2eValue', 'MapIndex (reflect.Value) (reflect.Value)'),
  "MapKeys": QMeth('MapKeys', (), ('[]reflect.Value',), 'signature_MapKeys___return__5b_5dreflect_2eValue', 'MapKeys () ([]reflect.Value)'),
  "MarshalJSON": QMeth('MarshalJSON', (), ('[]uint8', 'error'), 'signature_MarshalJSON___return__5b_5duint8_also_error', 'MarshalJSON () ([]uint8, error)'),
  "Match": QMeth('Match', ('[]uint8',), ('bool',), 'signature_Match___5b_5duint8_return_bool', 'Match ([]uint8) (bool)'),
  "MatchEmptyWidth": QMeth('MatchEmptyWidth', ('int32', 'int32'), ('bool',), 'signature_MatchEmptyWidth__int32_also_int32_return_bool', 'MatchEmptyWidth (int32, int32) (bool)'),
  "MatchReader": QMeth('MatchReader', ('io.RuneReader',), ('bool',), 'signature_MatchReader__io_2eRuneReader_return_bool', 'MatchReader (io.RuneReader) (bool)'),
  "MatchRune": QMeth('MatchRune', ('int32',), ('bool',), 'signature_MatchRune__int32_return_bool', 'MatchRune (int32) (bool)'),
  "MatchString": QMeth('MatchString', ('string',), ('bool',), 'signature_MatchString__string_return_bool', 'MatchString (string) (bool)'),
  "MaxCap": QMeth('MaxCap', (), ('int',), 'signature_MaxCap___return_int', 'MaxCap () (int)'),
  "Method": QMeth('Method', ('int',), ('reflect.Value',), 'signature_Method__int_return_reflect_2eValue', 'Method (int) (reflect.Value)'),
  "MethodByName": QMeth('MethodByName', ('string',), ('reflect.Value',), 'signature_MethodByName__string_return_reflect_2eValue', 'MethodByName (string) (reflect.Value)'),
  "Minute": QMeth('Minute', (), ('int',), 'signature_Minute___return_int', 'Minute () (int)'),
  "Minutes": QMeth('Minutes', (), ('float64',), 'signature_Minutes___return_float64', 'Minutes () (float64)'),
  "ModTime": QMeth('ModTime', (), ('time.Time',), 'signature_ModTime___return_time_2eTime', 'ModTime () (time.Time)'),
  "Mode": QMeth('Mode', (), ('os.FileMode',), 'signature_Mode___return_os_2eFileMode', 'Mode () (os.FileMode)'),
  "Month": QMeth('Month', (), ('time.Month',), 'signature_Month___return_time_2eMonth', 'Month () (time.Month)'),
  "NArg": QMeth('NArg', (), ('int',), 'signature_NArg___return_int', 'NArg () (int)'),
  "NFlag": QMeth('NFlag', (), ('int',), 'signature_NFlag___return_int', 'NFlag () (int)'),
  "Name": QMeth('Name', (), ('string',), 'signature_Name___return_string', 'Name () (string)'),
  "Nano": QMeth('Nano', (), ('int64',), 'signature_Nano___return_int64', 'Nano () (int64)'),
  "Nanosecond": QMeth('Nanosecond', (), ('int',), 'signature_Nanosecond___return_int', 'Nanosecond () (int)'),
  "Nanoseconds": QMeth('Nanoseconds', (), ('int64',), 'signature_Nanoseconds___return_int64', 'Nanoseconds () (int64)'),
  "Network": QMeth('Network', (), ('string',), 'signature_Network___return_string', 'Network () (string)'),
  "Next": QMeth('Next', (), ('uint',), 'signature_Next___return_uint', 'Next () (uint)'),
  "NormFloat64": QMeth('NormFloat64', (), ('float64',), 'signature_NormFloat64___return_float64', 'NormFloat64 () (float64)'),
  "NsPerOp": QMeth('NsPerOp', (), ('int64',), 'signature_NsPerOp___return_int64', 'NsPerOp () (int64)'),
  "NumField": QMeth('NumField', (), ('int',), 'signature_NumField___return_int', 'NumField () (int)'),
  "NumFields": QMeth('NumFields', (), ('int',), 'signature_NumFields___return_int', 'NumFields () (int)'),
  "NumMethod": QMeth('NumMethod', (), ('int',), 'signature_NumMethod___return_int', 'NumMethod () (int)'),
  "NumSubexp": QMeth('NumSubexp', (), ('int',), 'signature_NumSubexp___return_int', 'NumSubexp () (int)'),
  "OCSPResponse": QMeth('OCSPResponse', (), ('[]uint8',), 'signature_OCSPResponse___return__5b_5duint8', 'OCSPResponse () ([]uint8)'),
  "Opaque": QMeth('Opaque', (), ('bool',), 'signature_Opaque___return_bool', 'Opaque () (bool)'),
  "Open": QMeth('Open', (), ('io.ReadSeeker',), 'signature_Open___return_io_2eReadSeeker', 'Open () (io.ReadSeeker)'),
  "Output": QMeth('Output', ('int', 'string'), ('error',), 'signature_Output__int_also_string_return_error', 'Output (int, string) (error)'),
  "OverflowFloat": QMeth('OverflowFloat', ('float64',), ('bool',), 'signature_OverflowFloat__float64_return_bool', 'OverflowFloat (float64) (bool)'),
  "OverflowInt": QMeth('OverflowInt', ('int64',), ('bool',), 'signature_OverflowInt__int64_return_bool', 'OverflowInt (int64) (bool)'),
  "OverflowUint": QMeth('OverflowUint', ('uint64',), ('bool',), 'signature_OverflowUint__uint64_return_bool', 'OverflowUint (uint64) (bool)'),
  "PCToLine": QMeth('PCToLine', ('uint64',), ('int',), 'signature_PCToLine__uint64_return_int', 'PCToLine (uint64) (int)'),
  "PackageName": QMeth('PackageName', (), ('string',), 'signature_PackageName___return_string', 'PackageName () (string)'),
  "Parallel": QMeth('Parallel', (), (), 'signature_Parallel___return_', 'Parallel () ()'),
  "Parse": QMeth('Parse', ('[]string',), ('error',), 'signature_Parse___5b_5dstring_return_error', 'Parse ([]string) (error)'),
  "ParseForm": QMeth('ParseForm', (), ('error',), 'signature_ParseForm___return_error', 'ParseForm () (error)'),
  "ParseMultipartForm": QMeth('ParseMultipartForm', ('int64',), ('error',), 'signature_ParseMultipartForm__int64_return_error', 'ParseMultipartForm (int64) (error)'),
  "Parsed": QMeth('Parsed', (), ('bool',), 'signature_Parsed___return_bool', 'Parsed () (bool)'),
  "Password": QMeth('Password', (), ('string', 'bool'), 'signature_Password___return_string_also_bool', 'Password () (string, bool)'),
  "Peek": QMeth('Peek', ('int',), ('[]uint8', 'error'), 'signature_Peek__int_return__5b_5duint8_also_error', 'Peek (int) ([]uint8, error)'),
  "Pending": QMeth('Pending', (), ('int',), 'signature_Pending___return_int', 'Pending () (int)'),
  "Perm": QMeth('Perm', ('int',), ('[]int',), 'signature_Perm__int_return__5b_5dint', 'Perm (int) ([]int)'),
  "Pid": QMeth('Pid', (), ('int',), 'signature_Pid___return_int', 'Pid () (int)'),
  "PixOffset": QMeth('PixOffset', ('int', 'int'), ('int',), 'signature_PixOffset__int_also_int_return_int', 'PixOffset (int, int) (int)'),
  "Pointer": QMeth('Pointer', (), ('uintptr',), 'signature_Pointer___return_uintptr', 'Pointer () (uintptr)'),
  "Precedence": QMeth('Precedence', (), ('int',), 'signature_Precedence___return_int', 'Precedence () (int)'),
  "Precompute": QMeth('Precompute', (), (), 'signature_Precompute___return_', 'Precompute () ()'),
  "Prefix": QMeth('Prefix', (), ('string', 'bool'), 'signature_Prefix___return_string_also_bool', 'Prefix () (string, bool)'),
  "PrintDefaults": QMeth('PrintDefaults', (), (), 'signature_PrintDefaults___return_', 'PrintDefaults () ()'),
  "ProbablyPrime": QMeth('ProbablyPrime', ('int',), ('bool',), 'signature_ProbablyPrime__int_return_bool', 'ProbablyPrime (int) (bool)'),
  "ProtoAtLeast": QMeth('ProtoAtLeast', ('int', 'int'), ('bool',), 'signature_ProtoAtLeast__int_also_int_return_bool', 'ProtoAtLeast (int, int) (bool)'),
  "Quit": QMeth('Quit', (), ('error',), 'signature_Quit___return_error', 'Quit () (error)'),
  "RGBA": QMeth('RGBA', (), ('uint32', 'uint32', 'uint32', 'uint32'), 'signature_RGBA___return_uint32_also_uint32_also_uint32_also_uint32', 'RGBA () (uint32, uint32, uint32, uint32)'),
  "RLock": QMeth('RLock', (), (), 'signature_RLock___return_', 'RLock () ()'),
  "RUnlock": QMeth('RUnlock', (), (), 'signature_RUnlock___return_', 'RUnlock () ()'),
  "RatString": QMeth('RatString', (), ('string',), 'signature_RatString___return_string', 'RatString () (string)'),
  "Raw": QMeth('Raw', (), ('[]uint8',), 'signature_Raw___return__5b_5duint8', 'Raw () ([]uint8)'),
  "Rcpt": QMeth('Rcpt', ('string',), ('error',), 'signature_Rcpt__string_return_error', 'Rcpt (string) (error)'),
  "Read": QMeth('Read', ('[]uint8',), ('int', 'error'), 'signature_Read___5b_5duint8_return_int_also_error', 'Read ([]uint8) (int, error)'),
  "ReadAll": QMeth('ReadAll', (), ('[][]string', 'error'), 'signature_ReadAll___return__5b_5d_5b_5dstring_also_error', 'ReadAll () ([][]string, error)'),
  "ReadAt": QMeth('ReadAt', ('[]uint8', 'int64'), ('int', 'error'), 'signature_ReadAt___5b_5duint8_also_int64_return_int_also_error', 'ReadAt ([]uint8, int64) (int, error)'),
  "ReadByte": QMeth('ReadByte', (), ('uint8', 'error'), 'signature_ReadByte___return_uint8_also_error', 'ReadByte () (uint8, error)'),
  "ReadBytes": QMeth('ReadBytes', ('uint8',), ('[]uint8', 'error'), 'signature_ReadBytes__uint8_return__5b_5duint8_also_error', 'ReadBytes (uint8) ([]uint8, error)'),
  "ReadCodeLine": QMeth('ReadCodeLine', ('int',), ('int', 'string', 'error'), 'signature_ReadCodeLine__int_return_int_also_string_also_error', 'ReadCodeLine (int) (int, string, error)'),
  "ReadContinuedLine": QMeth('ReadContinuedLine', (), ('string', 'error'), 'signature_ReadContinuedLine___return_string_also_error', 'ReadContinuedLine () (string, error)'),
  "ReadContinuedLineBytes": QMeth('ReadContinuedLineBytes', (), ('[]uint8', 'error'), 'signature_ReadContinuedLineBytes___return__5b_5duint8_also_error', 'ReadContinuedLineBytes () ([]uint8, error)'),
  "ReadDotBytes": QMeth('ReadDotBytes', (), ('[]uint8', 'error'), 'signature_ReadDotBytes___return__5b_5duint8_also_error', 'ReadDotBytes () ([]uint8, error)'),
  "ReadDotLines": QMeth('ReadDotLines', (), ('[]string', 'error'), 'signature_ReadDotLines___return__5b_5dstring_also_error', 'ReadDotLines () ([]string, error)'),
  "ReadFrom": QMeth('ReadFrom', ('io.Reader',), ('int64', 'error'), 'signature_ReadFrom__io_2eReader_return_int64_also_error', 'ReadFrom (io.Reader) (int64, error)'),
  "ReadLine": QMeth('ReadLine', (), ('string', 'error'), 'signature_ReadLine___return_string_also_error', 'ReadLine () (string, error)'),
  "ReadLineBytes": QMeth('ReadLineBytes', (), ('[]uint8', 'error'), 'signature_ReadLineBytes___return__5b_5duint8_also_error', 'ReadLineBytes () ([]uint8, error)'),
  "ReadResponse": QMeth('ReadResponse', ('int',), ('int', 'string', 'error'), 'signature_ReadResponse__int_return_int_also_string_also_error', 'ReadResponse (int) (int, string, error)'),
  "ReadRune": QMeth('ReadRune', (), ('int32', 'int', 'error'), 'signature_ReadRune___return_int32_also_int_also_error', 'ReadRune () (int32, int, error)'),
  "ReadSlice": QMeth('ReadSlice', ('uint8',), ('[]uint8', 'error'), 'signature_ReadSlice__uint8_return__5b_5duint8_also_error', 'ReadSlice (uint8) ([]uint8, error)'),
  "ReadString": QMeth('ReadString', ('uint8',), ('string', 'error'), 'signature_ReadString__uint8_return_string_also_error', 'ReadString (uint8) (string, error)'),
  "Readdir": QMeth('Readdir', ('int',), ('[]os.FileInfo', 'error'), 'signature_Readdir__int_return__5b_5dos_2eFileInfo_also_error', 'Readdir (int) ([]os.FileInfo, error)'),
  "Readdirnames": QMeth('Readdirnames', ('int',), ('[]string', 'error'), 'signature_Readdirnames__int_return__5b_5dstring_also_error', 'Readdirnames (int) ([]string, error)'),
  "ReceiverName": QMeth('ReceiverName', (), ('string',), 'signature_ReceiverName___return_string', 'ReceiverName () (string)'),
  "Recv": QMeth('Recv', (), ('reflect.Value', 'bool'), 'signature_Recv___return_reflect_2eValue_also_bool', 'Recv () (reflect.Value, bool)'),
  "Referer": QMeth('Referer', (), ('string',), 'signature_Referer___return_string', 'Referer () (string)'),
  "Release": QMeth('Release', (), ('error',), 'signature_Release___return_error', 'Release () (error)'),
  "RemoveAll": QMeth('RemoveAll', (), ('error',), 'signature_RemoveAll___return_error', 'RemoveAll () (error)'),
  "RemoveMultiples": QMeth('RemoveMultiples', (), (), 'signature_RemoveMultiples___return_', 'RemoveMultiples () ()'),
  "Replace": QMeth('Replace', ('string',), ('string',), 'signature_Replace__string_return_string', 'Replace (string) (string)'),
  "ReplaceAll": QMeth('ReplaceAll', ('[]uint8', '[]uint8'), ('[]uint8',), 'signature_ReplaceAll___5b_5duint8_also__5b_5duint8_return__5b_5duint8', 'ReplaceAll ([]uint8, []uint8) ([]uint8)'),
  "ReplaceAllLiteral": QMeth('ReplaceAllLiteral', ('[]uint8', '[]uint8'), ('[]uint8',), 'signature_ReplaceAllLiteral___5b_5duint8_also__5b_5duint8_return__5b_5duint8', 'ReplaceAllLiteral ([]uint8, []uint8) ([]uint8)'),
  "ReplaceAllLiteralString": QMeth('ReplaceAllLiteralString', ('string', 'string'), ('string',), 'signature_ReplaceAllLiteralString__string_also_string_return_string', 'ReplaceAllLiteralString (string, string) (string)'),
  "ReplaceAllString": QMeth('ReplaceAllString', ('string', 'string'), ('string',), 'signature_ReplaceAllString__string_also_string_return_string', 'ReplaceAllString (string, string) (string)'),
  "RequestURI": QMeth('RequestURI', (), ('string',), 'signature_RequestURI___return_string', 'RequestURI () (string)'),
  "Reset": QMeth('Reset', (), (), 'signature_Reset___return_', 'Reset () ()'),
  "ResetTimer": QMeth('ResetTimer', (), (), 'signature_ResetTimer___return_', 'ResetTimer () ()'),
  "RightAlign": QMeth('RightAlign', (), ('[]uint8',), 'signature_RightAlign___return__5b_5duint8', 'RightAlign () ([]uint8)'),
  "Rollback": QMeth('Rollback', (), ('error',), 'signature_Rollback___return_error', 'Rollback () (error)'),
  "RowsAffected": QMeth('RowsAffected', (), ('int64', 'error'), 'signature_RowsAffected___return_int64_also_error', 'RowsAffected () (int64, error)'),
  "Run": QMeth('Run', (), ('error',), 'signature_Run___return_error', 'Run () (error)'),
  "RuntimeError": QMeth('RuntimeError', (), (), 'signature_RuntimeError___return_', 'RuntimeError () ()'),
  "Scan": QMeth('Scan', ('fmt.ScanState', 'int32'), ('error',), 'signature_Scan__fmt_2eScanState_also_int32_return_error', 'Scan (fmt.ScanState, int32) (error)'),
  "Search": QMeth('Search', ('string',), ('int',), 'signature_Search__string_return_int', 'Search (string) (int)'),
  "Second": QMeth('Second', (), ('int',), 'signature_Second___return_int', 'Second () (int)'),
  "Seconds": QMeth('Seconds', (), ('float64',), 'signature_Seconds___return_float64', 'Seconds () (float64)'),
  "Seed": QMeth('Seed', ('int64',), (), 'signature_Seed__int64_return_', 'Seed (int64) ()'),
  "Seek": QMeth('Seek', ('int64', 'int'), ('int64', 'error'), 'signature_Seek__int64_also_int_return_int64_also_error', 'Seek (int64, int) (int64, error)'),
  "Send": QMeth('Send', ('reflect.Value',), (), 'signature_Send__reflect_2eValue_return_', 'Send (reflect.Value) ()'),
  "ServeConn": QMeth('ServeConn', ('io.ReadWriteCloser',), (), 'signature_ServeConn__io_2eReadWriteCloser_return_', 'ServeConn (io.ReadWriteCloser) ()'),
  "Set": QMeth('Set', ('string', 'string'), (), 'signature_Set__string_also_string_return_', 'Set (string, string) ()'),
  "SetBasicAuth": QMeth('SetBasicAuth', ('string', 'string'), (), 'signature_SetBasicAuth__string_also_string_return_', 'SetBasicAuth (string, string) ()'),
  "SetBool": QMeth('SetBool', ('bool',), (), 'signature_SetBool__bool_return_', 'SetBool (bool) ()'),
  "SetBytes": QMeth('SetBytes', ('int64',), (), 'signature_SetBytes__int64_return_', 'SetBytes (int64) ()'),
  "SetColorIndex": QMeth('SetColorIndex', ('int', 'int', 'uint8'), (), 'signature_SetColorIndex__int_also_int_also_uint8_return_', 'SetColorIndex (int, int, uint8) ()'),
  "SetDeadline": QMeth('SetDeadline', ('time.Time',), ('error',), 'signature_SetDeadline__time_2eTime_return_error', 'SetDeadline (time.Time) (error)'),
  "SetFlags": QMeth('SetFlags', ('int',), (), 'signature_SetFlags__int_return_', 'SetFlags (int) ()'),
  "SetFloat": QMeth('SetFloat', ('float64',), (), 'signature_SetFloat__float64_return_', 'SetFloat (float64) ()'),
  "SetInt": QMeth('SetInt', ('int64',), (), 'signature_SetInt__int64_return_', 'SetInt (int64) ()'),
  "SetKeepAlive": QMeth('SetKeepAlive', ('bool',), ('error',), 'signature_SetKeepAlive__bool_return_error', 'SetKeepAlive (bool) (error)'),
  "SetLen": QMeth('SetLen', ('int',), (), 'signature_SetLen__int_return_', 'SetLen (int) ()'),
  "SetLines": QMeth('SetLines', ('[]int',), ('bool',), 'signature_SetLines___5b_5dint_return_bool', 'SetLines ([]int) (bool)'),
  "SetLinesForContent": QMeth('SetLinesForContent', ('[]uint8',), (), 'signature_SetLinesForContent___5b_5duint8_return_', 'SetLinesForContent ([]uint8) ()'),
  "SetLinger": QMeth('SetLinger', ('int',), ('error',), 'signature_SetLinger__int_return_error', 'SetLinger (int) (error)'),
  "SetMapIndex": QMeth('SetMapIndex', ('reflect.Value', 'reflect.Value'), (), 'signature_SetMapIndex__reflect_2eValue_also_reflect_2eValue_return_', 'SetMapIndex (reflect.Value, reflect.Value) ()'),
  "SetModTime": QMeth('SetModTime', ('time.Time',), (), 'signature_SetModTime__time_2eTime_return_', 'SetModTime (time.Time) ()'),
  "SetMode": QMeth('SetMode', ('os.FileMode',), (), 'signature_SetMode__os_2eFileMode_return_', 'SetMode (os.FileMode) ()'),
  "SetNoDelay": QMeth('SetNoDelay', ('bool',), ('error',), 'signature_SetNoDelay__bool_return_error', 'SetNoDelay (bool) (error)'),
  "SetOutput": QMeth('SetOutput', ('io.Writer',), (), 'signature_SetOutput__io_2eWriter_return_', 'SetOutput (io.Writer) ()'),
  "SetPrefix": QMeth('SetPrefix', ('string',), (), 'signature_SetPrefix__string_return_', 'SetPrefix (string) ()'),
  "SetReadBuffer": QMeth('SetReadBuffer', ('int',), ('error',), 'signature_SetReadBuffer__int_return_error', 'SetReadBuffer (int) (error)'),
  "SetReadDeadline": QMeth('SetReadDeadline', ('time.Time',), ('error',), 'signature_SetReadDeadline__time_2eTime_return_error', 'SetReadDeadline (time.Time) (error)'),
  "SetString": QMeth('SetString', ('string',), (), 'signature_SetString__string_return_', 'SetString (string) ()'),
  "SetUint": QMeth('SetUint', ('uint64',), (), 'signature_SetUint__uint64_return_', 'SetUint (uint64) ()'),
  "SetWriteBuffer": QMeth('SetWriteBuffer', ('int',), ('error',), 'signature_SetWriteBuffer__int_return_error', 'SetWriteBuffer (int) (error)'),
  "SetWriteDeadline": QMeth('SetWriteDeadline', ('time.Time',), ('error',), 'signature_SetWriteDeadline__time_2eTime_return_error', 'SetWriteDeadline (time.Time) (error)'),
  "Sign": QMeth('Sign', (), ('int',), 'signature_Sign___return_int', 'Sign () (int)'),
  "Signal": QMeth('Signal', (), (), 'signature_Signal___return_', 'Signal () ()'),
  "Signaled": QMeth('Signaled', (), ('bool',), 'signature_Signaled___return_bool', 'Signaled () (bool)'),
  "Size": QMeth('Size', (), ('int64',), 'signature_Size___return_int64', 'Size () (int64)'),
  "Skip": QMeth('Skip', (), ('error',), 'signature_Skip___return_error', 'Skip () (error)'),
  "SkipChildren": QMeth('SkipChildren', (), (), 'signature_SkipChildren___return_', 'SkipChildren () ()'),
  "Slice": QMeth('Slice', ('int', 'int'), ('reflect.Value',), 'signature_Slice__int_also_int_return_reflect_2eValue', 'Slice (int, int) (reflect.Value)'),
  "Sort": QMeth('Sort', (), (), 'signature_Sort___return_', 'Sort () ()'),
  "SrcDirs": QMeth('SrcDirs', (), ('[]string',), 'signature_SrcDirs___return__5b_5dstring', 'SrcDirs () ([]string)'),
  "Stack": QMeth('Stack', (), ('[]uintptr',), 'signature_Stack___return__5b_5duintptr', 'Stack () ([]uintptr)'),
  "Start": QMeth('Start', (), ('error',), 'signature_Start___return_error', 'Start () (error)'),
  "StartRequest": QMeth('StartRequest', ('uint',), (), 'signature_StartRequest__uint_return_', 'StartRequest (uint) ()'),
  "StartResponse": QMeth('StartResponse', ('uint',), (), 'signature_StartResponse__uint_return_', 'StartResponse (uint) ()'),
  "StartTLS": QMeth('StartTLS', (), (), 'signature_StartTLS___return_', 'StartTLS () ()'),
  "StartTimer": QMeth('StartTimer', (), (), 'signature_StartTimer___return_', 'StartTimer () ()'),
  "Stat": QMeth('Stat', (), ('os.FileInfo', 'error'), 'signature_Stat___return_os_2eFileInfo_also_error', 'Stat () (os.FileInfo, error)'),
  "Static": QMeth('Static', (), ('bool',), 'signature_Static___return_bool', 'Static () (bool)'),
  "StderrPipe": QMeth('StderrPipe', (), ('io.ReadCloser', 'error'), 'signature_StderrPipe___return_io_2eReadCloser_also_error', 'StderrPipe () (io.ReadCloser, error)'),
  "StdinPipe": QMeth('StdinPipe', (), ('io.WriteCloser', 'error'), 'signature_StdinPipe___return_io_2eWriteCloser_also_error', 'StdinPipe () (io.WriteCloser, error)'),
  "StdoutPipe": QMeth('StdoutPipe', (), ('io.ReadCloser', 'error'), 'signature_StdoutPipe___return_io_2eReadCloser_also_error', 'StdoutPipe () (io.ReadCloser, error)'),
  "Stop": QMeth('Stop', (), ('bool',), 'signature_Stop___return_bool', 'Stop () (bool)'),
  "StopTimer": QMeth('StopTimer', (), (), 'signature_StopTimer___return_', 'StopTimer () ()'),
  "Stopped": QMeth('Stopped', (), ('bool',), 'signature_Stopped___return_bool', 'Stopped () (bool)'),
  "String": QMeth('String', (), ('string',), 'signature_String___return_string', 'String () (string)'),
  "StringVar": QMeth('StringVar', ('*string', 'string', 'string', 'string'), (), 'signature_StringVar___2astring_also_string_also_string_also_string_return_', 'StringVar (*string, string, string, string) ()'),
  "Sub": QMeth('Sub', ('time.Time',), ('time.Duration',), 'signature_Sub__time_2eTime_return_time_2eDuration', 'Sub (time.Time) (time.Duration)'),
  "SubexpNames": QMeth('SubexpNames', (), ('[]string',), 'signature_SubexpNames___return__5b_5dstring', 'SubexpNames () ([]string)'),
  "Subjects": QMeth('Subjects', (), ('[][]uint8',), 'signature_Subjects___return__5b_5d_5b_5duint8', 'Subjects () ([][]uint8)'),
  "Success": QMeth('Success', (), ('bool',), 'signature_Success___return_bool', 'Success () (bool)'),
  "Swap": QMeth('Swap', ('int', 'int'), (), 'signature_Swap__int_also_int_return_', 'Swap (int, int) ()'),
  "Sync": QMeth('Sync', (), ('error',), 'signature_Sync___return_error', 'Sync () (error)'),
  "SystemTime": QMeth('SystemTime', (), ('time.Duration',), 'signature_SystemTime___return_time_2eDuration', 'SystemTime () (time.Duration)'),
  "Temporary": QMeth('Temporary', (), ('bool',), 'signature_Temporary___return_bool', 'Temporary () (bool)'),
  "Text": QMeth('Text', (), ('string',), 'signature_Text___return_string', 'Text () (string)'),
  "Timeout": QMeth('Timeout', (), ('bool',), 'signature_Timeout___return_bool', 'Timeout () (bool)'),
  "ToLower": QMeth('ToLower', ('int32',), ('int32',), 'signature_ToLower__int32_return_int32', 'ToLower (int32) (int32)'),
  "ToTitle": QMeth('ToTitle', ('int32',), ('int32',), 'signature_ToTitle__int32_return_int32', 'ToTitle (int32) (int32)'),
  "ToUpper": QMeth('ToUpper', ('int32',), ('int32',), 'signature_ToUpper__int32_return_int32', 'ToUpper (int32) (int32)'),
  "TokenText": QMeth('TokenText', (), ('string',), 'signature_TokenText___return_string', 'TokenText () (string)'),
  "TrapCause": QMeth('TrapCause', (), ('int',), 'signature_TrapCause___return_int', 'TrapCause () (int)'),
  "Truncate": QMeth('Truncate', ('int64',), ('error',), 'signature_Truncate__int64_return_error', 'Truncate (int64) (error)'),
  "TryRecv": QMeth('TryRecv', (), ('reflect.Value', 'bool'), 'signature_TryRecv___return_reflect_2eValue_also_bool', 'TryRecv () (reflect.Value, bool)'),
  "TrySend": QMeth('TrySend', ('reflect.Value',), ('bool',), 'signature_TrySend__reflect_2eValue_return_bool', 'TrySend (reflect.Value) (bool)'),
  "Type": QMeth('Type', (), ('reflect.Type',), 'signature_Type___return_reflect_2eType', 'Type () (reflect.Type)'),
  "UTC": QMeth('UTC', (), ('time.Time',), 'signature_UTC___return_time_2eTime', 'UTC () (time.Time)'),
  "Uint": QMeth('Uint', ('string', 'uint', 'string'), ('*uint',), 'signature_Uint__string_also_uint_also_string_return__2auint', 'Uint (string, uint, string) (*uint)'),
  "Uint32": QMeth('Uint32', (), ('uint32',), 'signature_Uint32___return_uint32', 'Uint32 () (uint32)'),
  "Uint64": QMeth('Uint64', ('string', 'uint64', 'string'), ('*uint64',), 'signature_Uint64__string_also_uint64_also_string_return__2auint64', 'Uint64 (string, uint64, string) (*uint64)'),
  "Uint64Var": QMeth('Uint64Var', ('*uint64', 'string', 'uint64', 'string'), (), 'signature_Uint64Var___2auint64_also_string_also_uint64_also_string_return_', 'Uint64Var (*uint64, string, uint64, string) ()'),
  "UintVar": QMeth('UintVar', ('*uint', 'string', 'uint', 'string'), (), 'signature_UintVar___2auint_also_string_also_uint_also_string_return_', 'UintVar (*uint, string, uint, string) ()'),
  "Unix": QMeth('Unix', (), ('int64', 'int64'), 'signature_Unix___return_int64_also_int64', 'Unix () (int64, int64)'),
  "UnixNano": QMeth('UnixNano', (), ('int64',), 'signature_UnixNano___return_int64', 'UnixNano () (int64)'),
  "Unlock": QMeth('Unlock', (), (), 'signature_Unlock___return_', 'Unlock () ()'),
  "UnmarshalJSON": QMeth('UnmarshalJSON', ('[]uint8',), ('error',), 'signature_UnmarshalJSON___5b_5duint8_return_error', 'UnmarshalJSON ([]uint8) (error)'),
  "UnreadByte": QMeth('UnreadByte', (), ('error',), 'signature_UnreadByte___return_error', 'UnreadByte () (error)'),
  "UnreadRune": QMeth('UnreadRune', (), ('error',), 'signature_UnreadRune___return_error', 'UnreadRune () (error)'),
  "UnsafeAddr": QMeth('UnsafeAddr', (), ('uintptr',), 'signature_UnsafeAddr___return_uintptr', 'UnsafeAddr () (uintptr)'),
  "UserAgent": QMeth('UserAgent', (), ('string',), 'signature_UserAgent___return_string', 'UserAgent () (string)'),
  "UserTime": QMeth('UserTime', (), ('time.Duration',), 'signature_UserTime___return_time_2eDuration', 'UserTime () (time.Duration)'),
  "Username": QMeth('Username', (), ('string',), 'signature_Username___return_string', 'Username () (string)'),
  "Validate": QMeth('Validate', (), ('error',), 'signature_Validate___return_error', 'Validate () (error)'),
  "Verify": QMeth('Verify', ('string',), ('error',), 'signature_Verify__string_return_error', 'Verify (string) (error)'),
  "VerifyHostname": QMeth('VerifyHostname', ('string',), ('error',), 'signature_VerifyHostname__string_return_error', 'VerifyHostname (string) (error)'),
  "Wait": QMeth('Wait', (), (), 'signature_Wait___return_', 'Wait () ()'),
  "Weekday": QMeth('Weekday', (), ('time.Weekday',), 'signature_Weekday___return_time_2eWeekday', 'Weekday () (time.Weekday)'),
  "Write": QMeth('Write', ('[]uint8',), ('int', 'error'), 'signature_Write___5b_5duint8_return_int_also_error', 'Write ([]uint8) (int, error)'),
  "WriteAll": QMeth('WriteAll', ('[][]string',), ('error',), 'signature_WriteAll___5b_5d_5b_5dstring_return_error', 'WriteAll ([][]string) (error)'),
  "WriteAt": QMeth('WriteAt', ('[]uint8', 'int64'), ('int', 'error'), 'signature_WriteAt___5b_5duint8_also_int64_return_int_also_error', 'WriteAt ([]uint8, int64) (int, error)'),
  "WriteByte": QMeth('WriteByte', ('uint8',), ('error',), 'signature_WriteByte__uint8_return_error', 'WriteByte (uint8) (error)'),
  "WriteField": QMeth('WriteField', ('string', 'string'), ('error',), 'signature_WriteField__string_also_string_return_error', 'WriteField (string, string) (error)'),
  "WriteHeader": QMeth('WriteHeader', ('int',), (), 'signature_WriteHeader__int_return_', 'WriteHeader (int) ()'),
  "WriteProxy": QMeth('WriteProxy', ('io.Writer',), ('error',), 'signature_WriteProxy__io_2eWriter_return_error', 'WriteProxy (io.Writer) (error)'),
  "WriteRune": QMeth('WriteRune', ('int32',), ('int', 'error'), 'signature_WriteRune__int32_return_int_also_error', 'WriteRune (int32) (int, error)'),
  "WriteString": QMeth('WriteString', ('string',), ('int', 'error'), 'signature_WriteString__string_return_int_also_error', 'WriteString (string) (int, error)'),
  "WriteSubset": QMeth('WriteSubset', ('io.Writer', 'map[string]bool'), ('error',), 'signature_WriteSubset__io_2eWriter_also_map_5bstring_5dbool_return_error', 'WriteSubset (io.Writer, map[string]bool) (error)'),
  "WriteTo": QMeth('WriteTo', ('io.Writer', 'int'), ('error',), 'signature_WriteTo__io_2eWriter_also_int_return_error', 'WriteTo (io.Writer, int) (error)'),
  "XORKeyStream": QMeth('XORKeyStream', ('[]uint8', '[]uint8'), (), 'signature_XORKeyStream___5b_5duint8_also__5b_5duint8_return_', 'XORKeyStream ([]uint8, []uint8) ()'),
  "YOffset": QMeth('YOffset', ('int', 'int'), ('int',), 'signature_YOffset__int_also_int_return_int', 'YOffset (int, int) (int)'),
  "Year": QMeth('Year', (), ('int',), 'signature_Year___return_int', 'Year () (int)'),
  "Zone": QMeth('Zone', (), ('string', 'int'), 'signature_Zone___return_string_also_int', 'Zone () (string, int)'),
  }
