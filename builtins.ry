from go import strings
from go import unicode

# MACRO go_type(t) -- creates a reflective Value of the go type t.

# MACRO go_new(t) -- creates a new zeroed instance of the go type t and returns reflective pointer to it.

# MACRO go_cast(t, x) -- Casts the value x to the go type t.

def rye_what(x):
  native:
    'return N_rye_what(a_x)'

def rye_flavor(x):
  native:
    'return Mkint(int(a_x.Flavor()))'

def ord(x):
  native:
    'return Mkint(int(a_x.String()[0]))'

def chr(x):
  native:
    'return MkStr(string([]byte{byte(a_x.Int())}))'

def any(vec):
  for e in vec:
    if e:
      return True
  return False

def all(vec):
  for e in vec:
    if not e:
      return False
  return True

def len(x):
  native:
    'return Mkint(a_x.Len())'

def repr(x):
  native:
    'return MkStr(a_x.Repr())'

def str(x):
  native:
    'return MkStr(a_x.String())'

def int(x):
  native:
    'return MkInt(a_x.Int())'

def float(x):
  native:
    'return MkFloat(a_x.Float())'

def range(x):
  native:
    'return N_range(a_x)'

def xrange(x):
  i = 0
  while i < x:
    yield i
    i += 1

def sorted(x, cmp=None, key=None, reverse=False):
  native:
    'return N_sorted(a_x, a_cmp, a_key, a_reverse)'

def list(x):
  native:
    'return MkList(a_x.List())'

def dict(*vec, **kv):
  native:
    'return N_dict(a_vec, a_kv)'

def tuple(x):
  native:
    'return MkTuple(a_x.List())'

def bool(x):
  native:
    'return MkBool(a_x.Bool())'

def type(x):
  native:
    'return a_x.Type()'

def byt(x):
  native:
    'return N_byt(a_x)'

def mkbyt(n):
  native:
    'return N_mkbyt(a_n)'

def rye_pickle(x):
  native:
    # TODO: let this return byt, to avoid copies.
    'return MkStr(string(Pickle(a_x)))'

def rye_unpickle(x):
  native:
    'return UnPickle(a_x.String())'

def max(*args):
  if len(args) == 0:
    raise 'no args to max()'
  if len(args) == 1:
    v = args[0]
    z = v[0]
    for e in v[1:]:
      if e > z:
        z = e
    return z
  else:
    return max(args)

def min(*args):
  if len(args) == 0:
    raise 'no args to min()'
  if len(args) == 1:
    v = args[0]
    z = v[0]
    for e in v[1:]:
      if e < z:
        z = e
    return z
  else:
    return min(args)


class PList(native):
  def append(x):
    native:
      'self.PP = append(self.PP, a_x)'

  def extend(x):
    native:
      'self.PP = append(self.PP, a_x.List()...)'

  def count(x):
    z = 0
    for e in self:
      if e == x:
        z += 1
    return z

  def index(x):
    i = 0
    for e in self:
      if e == x:
        return i
      i += 1
    raise 'ValueError'

  def remove(x):
    del self[self.index(x)]

  def insert(i, x):
    # Tgetitemslice not supported yet ### self[i:i] = [x]
    z = self[:i] + [x] + self[i:]
    native:
      'self.PP = v_z.List()'

  def pop(i = -1):
    x = self[i]
    del self[i]
    return x

  def reverse():
    n = len(self)
    say n, self
    for i in range(int(n/2)):
      say i, n-i-1, self[i], self[n-i-1]
      self[i], self[n-i-1] = self[n-i-1], self[i]

  def sort(cmp=None, key=None, reverse=False):
    native:
      'self.PP = N_sorted(self, a_cmp, a_key, a_reverse).List()'


class PDict(native):
  def clear():
    native:
      'self.PPP = make(map[string]P)'

  def copy():
    native:
      'z := make(map[string]P)'
      'for k, v := range self.PPP { z[k] = v }'
      'return MkDict(z)'

  def items():
    native:
      'z := make([]P, 0, len(self.PPP))'
      'for k, v := range self.PPP { z = append(z, MkTuple([]P{MkStr(k), v})) }'
      'return MkList(z)'
  def iteritems():
    return .items()

  def keys():
    native:
      'z := make([]P, 0, len(self.PPP))'
      'for k, _ := range self.PPP { z = append(z, MkStr(k)) }'
      'return MkList(z)'
  def iterkeys():
    return .keys()
  def iter():
    return .keys()

  def values():
    native:
      'z := make([]P, 0, len(self.PPP))'
      'for _, v := range self.PPP { z = append(z, v) }'
      'return MkList(z)'
  def itervalues():
    return .values()

  def get(key, default = None):
    native:
      'k := a_key.String()'
      'if z, ok := self.PPP[k]; ok { return z }'
      'return a_default'

  def has_key(key):
    return (key in self)

  def setdefault(key, default=None):
    if key in self:
      return self[key]
    else:
      self[key] = default
      return default

  def update(x):
    for k, v in dict(x).items():
      self[k] = v


class PStr(native):
  def split(x, n = -1):
    if n < 0:
      native:
        'return MkStrs(i_strings.Split(self.S, a_x.String()))'
    else:
      native:
        'return MkStrs(i_strings.SplitN(self.S, a_x.String(), 1 + int(a_n.Int())))'

  def lower():
    native:
      'return MkStr(i_strings.ToLower(self.S))'

  def title():
    native:
      'return MkStr(i_strings.ToTitle(self.S))'

  def upper():
    native:
      'return MkStr(i_strings.ToUpper(self.S))'

  def endswith(x):
    native:
      'return MkBool(i_strings.HasSuffix(self.S, a_x.String()))'

  def startswith(x):
    native:
      'return MkBool(i_strings.HasPrefix(self.S, a_x.String()))'

  def strip(x):
    native:
      'return MkStr(i_strings.Trim(self.S, a_x.String()))'

  def lstrip(x):
    native:
      'return MkStr(i_strings.TrimLeft(self.S, a_x.String()))'

  def rstrip(x):
    native:
      'return MkStr(i_strings.TrimRight(self.S, a_x.String()))'

  def replace(old, new, count = -1):
    native:
      'return MkStr(i_strings.Replace(self.S, a_old.String(), a_new.String(), int(a_count.Int())))'

  def find(x):
    native:
      'return Mkint(i_strings.Index(self.S, a_x.String()))'

  def rfind(x):
    native:
      'return Mkint(i_strings.LastIndex(self.S, a_x.String()))'

  def index(x):
    z = self.find(x)
    if z < 0:
      raise 'ValueError'
    return z

  def rindex(x):
    z = self.rfind(x)
    if z < 0:
      raise 'ValueError'
    return z

  def isalpha():
    if self:
      for c in self:
        if not unicode.IsLetter(ord(c)):
          return False
      return True
    else:
      return False

  def isdigit():
    if self:
      for c in self:
        if not unicode.IsDigit(ord(c)):
          return False
      return True
    else:
      return False

  def isalnum():
    if self:
      for c in self:
        if (not unicode.IsDigit(ord(c))) and (not unicode.IsLetter(ord(c))):
          return False
      return True
    else:
      return False

  def islower():
    if self:
      for c in self:
        if not unicode.IsLower(ord(c)):
          return False
      return True
    else:
      return False

  def isupper():
    if self:
      for c in self:
        if not unicode.IsUpper(ord(c)):
          return False
      return True
    else:
      return False

  def isspace():
    if self:
      for c in self:
        if not unicode.IsSpace(ord(c)):
          return False
      return True
    else:
      return False
