package rye

import (
	"testing"
)

func add(a, b int) int {
	return a + b
}
func addptr(a, b uintptr) uintptr {
	return a + b
}

func AddIntPtrFast(a uintptr, b uintptr) uintptr {
	return addptr(a, b)
}

func AddIntPtrSlow(a uintptr, b uintptr) uintptr {
	a1 := a
	a2 := a1
	a3 := a2

	b1 := b
	b2 := b1
	b3 := b2

	z := addptr(a3, b3)

	z1 := z
	z2 := z1
	z3 := z2

	return z3
}

func AddIntFast(a int, b int) int {
	return add(a, b)
}

func AddIntSlow(a int, b int) int {
	a1 := a
	a2 := a1
	a3 := a2

	b1 := b
	b2 := b1
	b3 := b2

	z := add(a3, b3)

	z1 := z
	z2 := z1
	z3 := z2

	return z3
}

func AddDSlow(ax, ay D, bx, by D) (D, D) {
	a1x := ax
	a2x := a1x
	a3x := a2x

	b1x := bx
	b2x := b1x
	b3x := b2x

	a1y := ay
	a2y := a1y
	a3y := a2y

	b1y := by
	b2y := b1y
	b3y := b2y

	zx, zy := AddD(a3x, a3y, b3x, b3y)

	z1x := zx
	z2x := z1x
	z3x := z2x

	z1y := zy
	z2y := z1y
	z3y := z2y

	return z3x, z3y
}

func MacroAddDSlow(ax, ay D, bx, by D) (D, D) {
	a1x := ax
	a2x := a1x
	a3x := a2x

	b1x := bx
	b2x := b1x
	b3x := b2x

	a1y := ay
	a2y := a1y
	a3y := a2y

	b1y := by
	b2y := b1y
	b3y := b2y

	zx, zy := macro.MacroAddD(a3x, a3y, b3x, b3y)

	z1x := zx
	z2x := z1x
	z3x := z2x

	z1y := zy
	z2y := z1y
	z3y := z2y

	return z3x, z3y
}

func AddWSlow(a W, b W) W {
	a1 := a
	a2 := a1
	a3 := a2

	b1 := b
	b2 := b1
	b3 := b2

	z := AddW(a3, b3)

	z1 := z
	z2 := z1
	z3 := z2

	return z3
}

func AddMFast(a M, b M) M {
	return a.Add(b)
}

func AddMSlow(a M, b M) M {
	a1 := a
	a2 := a1
	a3 := a2

	b1 := b
	b2 := b1
	b3 := b2

	z := a3.Add(b3)

	z1 := z
	z2 := z1
	z3 := z2

	return z3
}

func AddMSlowVar(a M, b M) M {
	var a1 M
	a1 = a
	var a2 M
	a2 = a1
	var a3 M
	a3 = a2

	var b1 M
	b1 = b
	var b2 M
	b2 = b1
	var b3 M
	b3 = b2

	var z M
	z = a3.Add(b3)

	var z1 M
	z1 = z
	var z2 M
	z2 = z1
	var z3 M
	z3 = z2

	return z3
}

func AddMSlowSink(a M, b M) M {
	a1 := a
	a2 := a1
	a3 := a2
	_ = a1
	_ = a2
	_ = a3
	_ = a1
	_ = a2
	_ = a3
	_ = a1
	_ = a2
	_ = a3
	_ = a1
	_ = a2
	_ = a3

	b1 := b
	b2 := b1
	b3 := b2
	_ = b1
	_ = b2
	_ = b3
	_ = b1
	_ = b2
	_ = b3
	_ = b1
	_ = b2
	_ = b3
	_ = b1
	_ = b2
	_ = b3

	z := a3.Add(b3)

	z1 := z
	z2 := z1
	z3 := z2
	_ = z1
	_ = z2
	_ = z3
	_ = z1
	_ = z2
	_ = z3
	_ = z1
	_ = z2
	_ = z3
	_ = z1
	_ = z2
	_ = z3

	return z3
}

func AddWSlowSink(a W, b W) W {
	a1 := a
	a2 := a1
	a3 := a2
	_ = a1
	_ = a2
	_ = a3
	_ = a1
	_ = a2
	_ = a3
	_ = a1
	_ = a2
	_ = a3
	_ = a1
	_ = a2
	_ = a3

	b1 := b
	b2 := b1
	b3 := b2
	_ = b1
	_ = b2
	_ = b3
	_ = b1
	_ = b2
	_ = b3
	_ = b1
	_ = b2
	_ = b3
	_ = b1
	_ = b2
	_ = b3

	z := AddW(a3, b3)

	z1 := z
	z2 := z1
	z3 := z2
	_ = z1
	_ = z2
	_ = z3
	_ = z1
	_ = z2
	_ = z3
	_ = z1
	_ = z2
	_ = z3
	_ = z1
	_ = z2
	_ = z3

	return z3
}

func BenchmarkAssignWSlow(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		sum += IntFromW(AddWSlow(WFromint(i), WFromint(i*i)))
	}
	//println(sum)
}

func BenchmarkAssignWSlowSink(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		sum += IntFromW(AddWSlowSink(WFromint(i), WFromint(i*i)))
	}
	//println(sum)
}

func BenchmarkAssignWFast(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		sum += IntFromW(AddW(WFromint(i), WFromint(i*i)))
	}
	//println(sum)
}

func BenchmarkAssignWFastQuick(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		sum += IntFromW(AddWQuick(WFromint(i), WFromint(i*i)))
	}
	//println(sum)
}

func MacroAddDSlowSink(ax, ay D, bx, by D) (D, D) {
	xa1 := ax
	xa2 := xa1
	xa3 := xa2
	_ = xa1
	_ = xa2
	_ = xa3
	_ = xa1
	_ = xa2
	_ = xa3
	_ = xa1
	_ = xa2
	_ = xa3
	_ = xa1
	_ = xa2
	_ = xa3

	xb1 := bx
	xb2 := xb1
	xb3 := xb2
	_ = xb1
	_ = xb2
	_ = xb3
	_ = xb1
	_ = xb2
	_ = xb3
	_ = xb1
	_ = xb2
	_ = xb3
	_ = xb1
	_ = xb2
	_ = xb3

	ya1 := ay
	ya2 := ya1
	ya3 := ya2
	_ = ya1
	_ = ya2
	_ = ya3
	_ = ya1
	_ = ya2
	_ = ya3
	_ = ya1
	_ = ya2
	_ = ya3
	_ = ya1
	_ = ya2
	_ = ya3

	yb1 := by
	yb2 := yb1
	yb3 := yb2
	_ = yb1
	_ = yb2
	_ = yb3
	_ = yb1
	_ = yb2
	_ = yb3
	_ = yb1
	_ = yb2
	_ = yb3
	_ = yb1
	_ = yb2
	_ = yb3

	zx, zy := macro.MacroAddD(xa3, ya3, xb3, yb3)

	xz1 := zx
	xz2 := xz1
	xz3 := xz2
	_ = xz1
	_ = xz2
	_ = xz3
	_ = xz1
	_ = xz2
	_ = xz3
	_ = xz1
	_ = xz2
	_ = xz3
	_ = xz1
	_ = xz2
	_ = xz3

	yz1 := zy
	yz2 := yz1
	yz3 := yz2
	_ = yz1
	_ = yz2
	_ = yz3
	_ = yz1
	_ = yz2
	_ = yz3
	_ = yz1
	_ = yz2
	_ = yz3
	_ = yz1
	_ = yz2
	_ = yz3

	return xz3, yz3
}

func AddDSlowSink(ax, ay D, bx, by D) (D, D) {
	xa1 := ax
	xa2 := xa1
	xa3 := xa2
	_ = xa1
	_ = xa2
	_ = xa3
	_ = xa1
	_ = xa2
	_ = xa3
	_ = xa1
	_ = xa2
	_ = xa3
	_ = xa1
	_ = xa2
	_ = xa3

	xb1 := bx
	xb2 := xb1
	xb3 := xb2
	_ = xb1
	_ = xb2
	_ = xb3
	_ = xb1
	_ = xb2
	_ = xb3
	_ = xb1
	_ = xb2
	_ = xb3
	_ = xb1
	_ = xb2
	_ = xb3

	ya1 := ay
	ya2 := ya1
	ya3 := ya2
	_ = ya1
	_ = ya2
	_ = ya3
	_ = ya1
	_ = ya2
	_ = ya3
	_ = ya1
	_ = ya2
	_ = ya3
	_ = ya1
	_ = ya2
	_ = ya3

	yb1 := by
	yb2 := yb1
	yb3 := yb2
	_ = yb1
	_ = yb2
	_ = yb3
	_ = yb1
	_ = yb2
	_ = yb3
	_ = yb1
	_ = yb2
	_ = yb3
	_ = yb1
	_ = yb2
	_ = yb3

	zx, zy := AddD(xa3, ya3, xb3, yb3)

	xz1 := zx
	xz2 := xz1
	xz3 := xz2
	_ = xz1
	_ = xz2
	_ = xz3
	_ = xz1
	_ = xz2
	_ = xz3
	_ = xz1
	_ = xz2
	_ = xz3
	_ = xz1
	_ = xz2
	_ = xz3

	yz1 := zy
	yz2 := yz1
	yz3 := yz2
	_ = yz1
	_ = yz2
	_ = yz3
	_ = yz1
	_ = yz2
	_ = yz3
	_ = yz1
	_ = yz2
	_ = yz3
	_ = yz1
	_ = yz2
	_ = yz3

	return xz3, yz3
}

func BenchmarkAssignDSlow(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		d1, d2 := DFromint(i)
		d3, d4 := DFromint(i * i)
		d5, d6 := AddDSlow(d1, d2, d3, d4)
		sum += IntFromD(d5, d6)
	}
	//println(sum)
}

func BenchmarkAssignDSlowMacro(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		d1, d2 := DFromint(i)
		d3, d4 := DFromint(i * i)
		d5, d6 := MacroAddDSlow(d1, d2, d3, d4)
		sum += IntFromD(d5, d6)
	}
	//println(sum)
}

func BenchmarkAssignDSlowSinkMacro(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		d1, d2 := DFromint(i)
		d3, d4 := DFromint(i * i)
		d5, d6 := MacroAddDSlowSink(d1, d2, d3, d4)
		sum += IntFromD(d5, d6)
	}
	//println(sum)
}

func BenchmarkAssignDSlowSink(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		d1, d2 := DFromint(i)
		d3, d4 := DFromint(i * i)
		d5, d6 := AddDSlowSink(d1, d2, d3, d4)
		sum += IntFromD(d5, d6)
	}
	//println(sum)
}

func BenchmarkAssignDFast(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		d1, d2 := DFromint(i)
		d3, d4 := DFromint(i * i)
		d5, d6 := AddD(d1, d2, d3, d4)
		sum += IntFromD(d5, d6)
	}
	//println(sum)
}

func BenchmarkAssignDFastQuick(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		d1, d2 := DFromint(i)
		d3, d4 := DFromint(i * i)
		d5, d6 := AddDQuick(d1, d2, d3, d4)
		sum += IntFromD(d5, d6)
	}
	//println(sum)
}

func BenchmarkAssignMSlow(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		sum += AddMSlow(Mkint(i), Mkint(i*i)).Int()
	}
	//println(sum)
}

func BenchmarkAssignMSlowVar(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		sum += AddMSlowVar(Mkint(i), Mkint(i*i)).Int()
	}
	//println(sum)
}

func BenchmarkAssignMSlowSink(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		sum += AddMSlowSink(Mkint(i), Mkint(i*i)).Int()
	}
	//println(sum)
}

func BenchmarkAssignMFast(b *testing.B) {
	var sum int64
	for i := 0; i < b.N; i++ {
		sum += AddMFast(Mkint(i), Mkint(i*i)).Int()
	}
	//println(sum)
}

func BenchmarkAssignIntPtrSlow(b *testing.B) {
	var i, sum uintptr
	for i = 0; i < uintptr(b.N); i++ {
		sum += AddIntPtrSlow(i, i*i)
	}
	//println(sum)
}

func BenchmarkAssignIntPtrFast(b *testing.B) {
	var i, sum uintptr
	for i = 0; i < uintptr(b.N); i++ {
		sum += AddIntPtrFast(i, i*i)
	}
	//println(sum)
}

func BenchmarkAssignIntSlow(b *testing.B) {
	var sum int
	for i := 0; i < b.N; i++ {
		sum += AddIntSlow(i, i*i)
	}
	//println(sum)
}

func BenchmarkAssignIntFast(b *testing.B) {
	var sum int
	for i := 0; i < b.N; i++ {
		sum += AddIntFast(i, i*i)
	}
	//println(sum)
}
